/* Generated by gep (125/04/14 21:47:45) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_AVR_INCLUDE_AVR_CODE_TABLE_H
#define GLISS_AVR_INCLUDE_AVR_CODE_TABLE_H


#if defined(__cplusplus)
extern  "C"
{
#endif

#include <float.h>
#include <math.h>

#include <avr/api.h>
#include <avr/macros.h>
#include <avr/grt.h>

/* module headers */


#include <avr/mem.h>
#include <avr/grt.h>
#include <avr/error.h>
#include <avr/gen_int.h>
#include <avr/env.h>
#include <avr/loader.h>
#include <avr/code.h>


/* switch optimisation tables */


/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

#define AVR__SIZE	16
static void avr_instr_UNKNOWN_code(avr_state_t *state, avr_inst_t *inst) {
	/* must not be executed ! */
	avr_execute_unknown(state, AVR_UNKNOWN___IADDR);
}

/* CALL %d (%04x) */
static void avr_instr_CALL_D__LP_04X_RP__code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		avr_mem_write8(AVR_M, AVR_SP, avr_field16(AVR_PC, 7, 0));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
		avr_mem_write8(AVR_M, AVR_SP, avr_field16(AVR_PC, 15, 8));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
		AVR_PC = avr_field32(AVR_CALL_D__LP_04X_RP__x_x_k, 15, 0);
	}

}

/* JMP %d (%04x) */
static void avr_instr_JMP_D__LP_04X_RP__code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		AVR_PC = avr_field32(AVR_JMP_D__LP_04X_RP__x_x_k, 15, 0);
	}

}

/* STS %d, R%d */
static void avr_instr_STS_D__RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		if((((uint32_t)(AVR_STS_D__RD_x_x_a)) < 32))
			AVR_R[AVR_STS_D__RD_x_x_a] = AVR_R[AVR_STS_D__RD_x_x_d];
		else {
			if((((uint32_t)(AVR_STS_D__RD_x_x_a)) < 96))
				AVR_IO[(((uint32_t)(AVR_STS_D__RD_x_x_a)) - 32)] = AVR_R[AVR_STS_D__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(AVR_STS_D__RD_x_x_a)) - 96), AVR_R[AVR_STS_D__RD_x_x_d]);
		}
	}

}

/* LDS R%d, 0x%04x */
static void avr_instr_LDS_RD__0X04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 4)));
		if((((uint32_t)(AVR_LDS_RD__0X04X_x_x_k)) < 32))
			AVR_R[AVR_LDS_RD__0X04X_x_x_d] = AVR_R[AVR_LDS_RD__0X04X_x_x_k];
		else {
			if((((uint32_t)(AVR_LDS_RD__0X04X_x_x_k)) < 96))
				AVR_R[AVR_LDS_RD__0X04X_x_x_d] = AVR_IO[(((uint32_t)(AVR_LDS_RD__0X04X_x_x_k)) - 32)];
			else
				AVR_R[AVR_LDS_RD__0X04X_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(AVR_LDS_RD__0X04X_x_x_k)) - 96));
		}
	}

}

/* BRID .%+d ; %+04x */
static void avr_instr_BRID___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 7))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRID___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRIE .%+d ; %+04x */
static void avr_instr_BRIE___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 7))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRIE___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRVC .%+d ; %+04x */
static void avr_instr_BRVC___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 3))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRVC___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRVS .%+d ; %+04x */
static void avr_instr_BRVS___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 3))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRVS___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRTC .%+d ; %+04x */
static void avr_instr_BRTC___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 6))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRTC___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRTS .%+d ; %+04x */
static void avr_instr_BRTS___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 6))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRTS___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRHC .%+d ; %+04x */
static void avr_instr_BRHC___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 5))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRHC___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRHS .%+d ; %+04x */
static void avr_instr_BRHS___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 5))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRHS___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRLT .%+d ; %+04x */
static void avr_instr_BRLT___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((avr_bit32(AVR_SREG, 2) ^ ((uint8_t)((((uint32_t)(avr_bit32(AVR_SREG, 3))) == 1)))))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRLT___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRGE .%+d ; %+04x */
static void avr_instr_BRGE___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((avr_bit32(AVR_SREG, 2) ^ ((uint8_t)((((uint32_t)(avr_bit32(AVR_SREG, 3))) == 0)))))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRGE___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRPL .%+d ; %+04x */
static void avr_instr_BRPL___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 2))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRPL___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRMI .%+d ; %+04x */
static void avr_instr_BRMI___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 2))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRMI___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRCC .%+d ; %+04x */
static void avr_instr_BRCC___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 0))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRCC___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRCS .%+d ; %+04x */
static void avr_instr_BRCS___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 0))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRCS___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BRNE .%+d ; %+04x */
static void avr_instr_BRNE___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 1))) == 0))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BRNE___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* BREQ .%+d ; %+04x */
static void avr_instr_BREQ___P_D__3B__P_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit32(AVR_SREG, 1))) == 1))
			AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_BREQ___P_D__3B__P_04X_x_x_k)) * 2))));
	}

}

/* SBIC IO%d, %d */
static void avr_instr_SBIC_IOD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_64_x;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_64_x = avr_field8_generic(AVR_IO[AVR_SBIC_IOD__D_x_x_a], AVR_SBIC_IOD__D_x_x_b, AVR_SBIC_IOD__D_x_x_b, 1 );
		if((((uint32_t)(__gliss_64_x)) == 1))
			AVR_SKIP_NEXT = ((uint8_t)(1));
	}

}

/* SBIC IO%d, %d */
static void avr_instr_SBIC_IOD__D_0_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_63_x;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_63_x = avr_field8_generic(AVR_IO[AVR_SBIC_IOD__D_0_x_x_a], AVR_SBIC_IOD__D_0_x_x_b, AVR_SBIC_IOD__D_0_x_x_b, 1 );
		if((((uint32_t)(__gliss_63_x)) == 0))
			AVR_SKIP_NEXT = ((uint8_t)(1));
	}

}

/* SBRS R%d, %d */
static void avr_instr_SBRS_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_62_Rr;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_62_Rr = AVR_R[AVR_SBRS_RD__D_x_x_r];
		if((((uint32_t)(avr_field16_generic(__gliss_62_Rr, AVR_SBRS_RD__D_x_x_b, AVR_SBRS_RD__D_x_x_b, 1 ))) == 1))
			AVR_SKIP_NEXT = ((uint8_t)(1));
	}

}

/* SBRC R%d, %d */
static void avr_instr_SBRC_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_61_Rr;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_61_Rr = AVR_R[AVR_SBRC_RD__D_x_x_r];
		if((((uint32_t)(avr_field16_generic(__gliss_61_Rr, AVR_SBRC_RD__D_x_x_b, AVR_SBRC_RD__D_x_x_b, 1 ))) == 0))
			AVR_SKIP_NEXT = ((uint8_t)(1));
	}

}

/* CPI R%d, 0x%02x ; %d */
static void avr_instr_CPI_RD__0X02X__3B_D_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_60_R;
	uint16_t __gliss_59_Rd;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_59_Rd = AVR_R[(((uint32_t)(AVR_CPI_RD__0X02X__3B_D_x_x_d)) + 16)];
		__gliss_60_R = (__gliss_59_Rd - ((uint16_t)(AVR_CPI_RD__0X02X__3B_D_x_x_k)));
		AVR_SREG = avr_set_field32(AVR_SREG, (((__AVR_MASK32(1, ~avr_bit16(__gliss_59_Rd, 3)) & avr_bit8(AVR_CPI_RD__0X02X__3B_D_x_x_k, 3)) | (avr_bit8(AVR_CPI_RD__0X02X__3B_D_x_x_k, 3) & avr_bit16(__gliss_60_R, 3))) | (avr_bit16(__gliss_60_R, 3) & __AVR_MASK32(1, ~avr_bit16(__gliss_59_Rd, 3)))), 5, 5);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit16(__gliss_59_Rd, 7) & __AVR_MASK32(1, ~avr_bit8(AVR_CPI_RD__0X02X__3B_D_x_x_k, 7))) & __AVR_MASK32(1, ~avr_bit16(__gliss_60_R, 7))) | ((__AVR_MASK32(1, ~avr_bit16(__gliss_59_Rd, 7)) & avr_bit8(AVR_CPI_RD__0X02X__3B_D_x_x_k, 7)) & avr_bit16(__gliss_60_R, 7))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_60_R, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_60_R)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, (((__AVR_MASK32(1, ~avr_bit16(__gliss_59_Rd, 7)) & avr_bit8(AVR_CPI_RD__0X02X__3B_D_x_x_k, 7)) | (avr_bit8(AVR_CPI_RD__0X02X__3B_D_x_x_k, 7) & avr_bit16(__gliss_60_R, 7))) | (avr_bit16(__gliss_60_R, 7) & __AVR_MASK32(1, ~avr_bit16(__gliss_59_Rd, 7)))), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
	}

}

/* CPC R%d, R%d */
static void avr_instr_CPC_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_58_R;
	uint16_t __gliss_57_Rr;
	uint16_t __gliss_56_Rd;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_56_Rd = AVR_R[AVR_CPC_RD__RD_x_x_d];
		__gliss_57_Rr = AVR_R[AVR_CPC_RD__RD_x_x_r];
		__gliss_58_R = ((__gliss_56_Rd - __gliss_57_Rr) - ((uint16_t)(avr_bit32(AVR_SREG, 0))));
		AVR_SREG = avr_set_field32(AVR_SREG, (((__AVR_MASK32(1, ~avr_bit16(__gliss_56_Rd, 3)) & avr_bit16(__gliss_57_Rr, 3)) | (avr_bit16(__gliss_57_Rr, 3) & avr_bit16(__gliss_58_R, 3))) | (avr_bit16(__gliss_58_R, 3) & __AVR_MASK32(1, ~avr_bit16(__gliss_56_Rd, 3)))), 5, 5);
		AVR_SREG = avr_set_field32(AVR_SREG, ((((avr_bit16(__gliss_56_Rd, 7) & __AVR_MASK32(1, ~avr_bit16(__gliss_57_Rr, 7))) & __AVR_MASK32(1, ~avr_bit16(__gliss_58_R, 7))) | (__AVR_MASK32(1, ~avr_bit16(__gliss_56_Rd, 7)) & avr_bit16(__gliss_57_Rr, 7))) && avr_bit16(__gliss_58_R, 7)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_58_R, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_58_R)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, (((__AVR_MASK32(1, ~avr_bit16(__gliss_56_Rd, 7)) & avr_bit16(__gliss_57_Rr, 7)) | (avr_bit16(__gliss_57_Rr, 7) & avr_bit16(__gliss_58_R, 7))) | (avr_bit16(__gliss_58_R, 7) & __AVR_MASK32(1, ~avr_bit16(__gliss_56_Rd, 7)))), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
	}

}

/* CP R%d, R%d */
static void avr_instr_CP_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_55_R;
	uint8_t __gliss_54_Rr;
	uint8_t __gliss_53_Rd;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_53_Rd = AVR_R[AVR_CP_RD__RD_x_x_d];
		__gliss_54_Rr = AVR_R[AVR_CP_RD__RD_x_x_r];
		__gliss_55_R = (__gliss_53_Rd - __gliss_54_Rr);
		AVR_SREG = avr_set_field32(AVR_SREG, (((__AVR_MASK32(1, ~avr_bit8(__gliss_53_Rd, 3)) & avr_bit8(__gliss_54_Rr, 3)) | (avr_bit8(__gliss_54_Rr, 3) & avr_bit8(__gliss_55_R, 3))) | (avr_bit8(__gliss_55_R, 3) & __AVR_MASK32(1, ~avr_bit8(__gliss_53_Rd, 3)))), 5, 5);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(__gliss_53_Rd, 7) & __AVR_MASK32(1, ~avr_bit8(__gliss_54_Rr, 7))) & __AVR_MASK32(1, ~avr_bit8(__gliss_55_R, 7))) | ((__AVR_MASK32(1, ~avr_bit8(__gliss_53_Rd, 7)) & avr_bit8(__gliss_54_Rr, 7)) & avr_bit8(__gliss_55_R, 7))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_55_R, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_55_R)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, (((__AVR_MASK32(1, ~avr_bit8(__gliss_53_Rd, 7)) & avr_bit8(__gliss_54_Rr, 7)) | (avr_bit8(__gliss_54_Rr, 7) & avr_bit8(__gliss_55_R, 7))) | (avr_bit8(__gliss_55_R, 7) & __AVR_MASK32(1, ~avr_bit8(__gliss_53_Rd, 7)))), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
	}

}

/* CSPE R%d, R%d */
static void avr_instr_CSPE_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_52_Rr;
	uint16_t __gliss_51_Rd;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_51_Rd = AVR_R[AVR_CSPE_RD__RD_x_x_d];
		__gliss_52_Rr = AVR_R[AVR_CSPE_RD__RD_x_x_r];
		if((__gliss_51_Rd == __gliss_52_Rr))
			AVR_SKIP_NEXT = ((uint8_t)(1));
	}

}

/* RETI */
static void avr_instr_RETI_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) + 1)));
		AVR_PC = avr_set_field16(AVR_PC, ((uint16_t)(avr_mem_read8(AVR_M, AVR_SP))), 15, 8);
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) + 1)));
		AVR_PC = avr_set_field16(AVR_PC, ((uint16_t)(avr_mem_read8(AVR_M, AVR_SP))), 7, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 7, 7);
	}

}

/* RET */
static void avr_instr_RET_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) + 1)));
		AVR_PC = avr_set_field16(AVR_PC, ((uint16_t)(avr_mem_read8(AVR_M, AVR_SP))), 15, 8);
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) + 1)));
		AVR_PC = avr_set_field16(AVR_PC, ((uint16_t)(avr_mem_read8(AVR_M, AVR_SP))), 7, 0);
	}

}

/* ICALL */
static void avr_instr_ICALL_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		avr_mem_write8(AVR_M, AVR_SP, avr_field16(AVR_PC, 7, 0));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
		avr_mem_write8(AVR_M, AVR_SP, avr_field16(AVR_PC, 15, 8));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
		AVR_PC = avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32);
	}

}

/* RCALL %d (%04x) */
static void avr_instr_RCALL_D__LP_04X_RP__code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		avr_mem_write8(AVR_M, AVR_SP, avr_field16(AVR_PC, 7, 0));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
		avr_mem_write8(AVR_M, AVR_SP, avr_field16(AVR_PC, 15, 8));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
		AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_RCALL_D__LP_04X_RP__x_x_k)) * 2))));
	}

}

/* IJMP */
static void avr_instr_IJMP_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_PC = avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32);
	}

}

/* RJMP .%+d ; %04x */
static void avr_instr_RJMP___P_D__3B_04X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_PC = ((uint16_t)((((int32_t)(AVR_PC)) + (((int32_t)(AVR_RJMP___P_D__3B_04X_x_x_k)) * 2))));
	}

}

/* FMULSU R%d, R%d */
static void avr_instr_FMULSU_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_50_R_;
	uint32_t __gliss_49_rl;
	uint32_t __gliss_48_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_48_dl = (16 + ((uint32_t)(AVR_FMULSU_RD__RD_x_x_d)));
		__gliss_49_rl = (16 + ((uint32_t)(AVR_FMULSU_RD__RD_x_x_r)));
		__gliss_50_R_ = (AVR_R[__gliss_48_dl] * AVR_R[__gliss_49_rl]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(__gliss_50_R_, 16), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_50_R_ == 0), 1, 1);
		AVR_R[0] = ((uint8_t)((__gliss_50_R_ >> 8)));
		AVR_R[1] = ((uint8_t)((__gliss_50_R_ & 255LU)));
	}

}

/* FMULS R%d, R%d */
static void avr_instr_FMULS_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_47_R_;
	uint32_t __gliss_46_rl;
	uint32_t __gliss_45_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_45_dl = (16 + ((uint32_t)(AVR_FMULS_RD__RD_x_x_d)));
		__gliss_46_rl = (16 + ((uint32_t)(AVR_FMULS_RD__RD_x_x_r)));
		__gliss_47_R_ = (AVR_R[__gliss_45_dl] * AVR_R[__gliss_46_rl]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(__gliss_47_R_, 16), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_47_R_ == 0), 1, 1);
		AVR_R[0] = ((uint8_t)((__gliss_47_R_ >> 8)));
		AVR_R[1] = ((uint8_t)((__gliss_47_R_ & 255LU)));
	}

}

/* FMUL R%d, R%d */
static void avr_instr_FMUL_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_44_R_;
	uint32_t __gliss_43_rl;
	uint32_t __gliss_42_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_42_dl = (16 + ((uint32_t)(AVR_FMUL_RD__RD_x_x_d)));
		__gliss_43_rl = (16 + ((uint32_t)(AVR_FMUL_RD__RD_x_x_r)));
		__gliss_44_R_ = (AVR_R[__gliss_42_dl] * AVR_R[__gliss_43_rl]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_44_R_, 15), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_44_R_)) == 0), 1, 1);
		AVR_R[0] = ((uint8_t)((__gliss_44_R_ >> 8)));
		AVR_R[1] = ((uint8_t)((((uint32_t)(__gliss_44_R_)) & 255LU)));
	}

}

/* MULSU R%d, R%d */
static void avr_instr_MULSU_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_41_R_;
	uint32_t __gliss_40_rl;
	uint32_t __gliss_39_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_39_dl = (16 + ((uint32_t)(AVR_MULSU_RD__RD_x_x_d)));
		__gliss_40_rl = (16 + ((uint32_t)(AVR_MULSU_RD__RD_x_x_r)));
		__gliss_41_R_ = (AVR_R[__gliss_39_dl] * AVR_R[__gliss_40_rl]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_41_R_, 15), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_41_R_)) == 0), 1, 1);
		AVR_R[0] = ((uint8_t)((__gliss_41_R_ >> 8)));
		AVR_R[1] = ((uint8_t)((((uint32_t)(__gliss_41_R_)) & 255LU)));
	}

}

/* MULS R%d, R%d */
static void avr_instr_MULS_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_38_R_;
	uint32_t __gliss_37_rl;
	uint32_t __gliss_36_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_36_dl = (16 + ((uint32_t)(AVR_MULS_RD__RD_x_x_d)));
		__gliss_37_rl = (16 + ((uint32_t)(AVR_MULS_RD__RD_x_x_r)));
		__gliss_38_R_ = (AVR_R[__gliss_36_dl] * AVR_R[__gliss_37_rl]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_38_R_, 15), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_38_R_)) == 0), 1, 1);
		AVR_R[0] = ((uint8_t)((__gliss_38_R_ >> 8)));
		AVR_R[1] = ((uint8_t)((((uint32_t)(__gliss_38_R_)) & 255LU)));
	}

}

/* MUL R%d, R%d */
static void avr_instr_MUL_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gliss_35_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_35_R_ = (AVR_R[AVR_MUL_RD__RD_x_x_d] * AVR_R[AVR_MUL_RD__RD_x_x_r]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_35_R_, 15), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_35_R_)) == 0), 1, 1);
		AVR_R[0] = ((uint8_t)((__gliss_35_R_ >> 8)));
		AVR_R[1] = ((uint8_t)((((uint32_t)(__gliss_35_R_)) & 255LU)));
	}

}

/* DEC R%d */
static void avr_instr_DEC_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_33_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_33_R_ = (((uint32_t)(AVR_R[AVR_DEC_RD_x_x_d])) - 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(__gliss_33_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(AVR_R[AVR_DEC_RD_x_x_d])) == 128), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 4)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_33_R_ == 0), 1, 1);
		AVR_R[AVR_DEC_RD_x_x_d] = ((uint8_t)(__gliss_33_R_));
	}

}

/* INC R%d */
static void avr_instr_INC_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_32_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_32_R_ = (((uint32_t)(AVR_R[AVR_INC_RD_x_x_d])) + 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(__gliss_32_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(AVR_R[AVR_INC_RD_x_x_d])) == 127), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 4)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_32_R_ == 0), 1, 1);
		AVR_R[AVR_INC_RD_x_x_d] = ((uint8_t)(__gliss_32_R_));
	}

}

/* NEG R%d */
static void avr_instr_NEG_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_31_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_31_R_ = (0 - ((uint32_t)(AVR_R[AVR_NEG_RD_x_x_d])));
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(__gliss_31_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_31_R_ == 16), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(__gliss_31_R_, 3) | avr_bit8(AVR_R[AVR_NEG_RD_x_x_d], 3)), 5, 5);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_31_R_ == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_31_R_ != 0), 0, 0);
		AVR_R[AVR_NEG_RD_x_x_d] = ((uint8_t)(__gliss_31_R_));
	}

}

/* COM R%d */
static void avr_instr_COM_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_30_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_30_R_ = (255LU - ((uint32_t)(AVR_R[AVR_COM_RD_x_x_d])));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(__gliss_30_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (__gliss_30_R_ == 0), 1, 1);
		AVR_R[AVR_COM_RD_x_x_d] = ((uint8_t)(__gliss_30_R_));
	}

}

/* EOR R%d, R%d */
static void avr_instr_EOR_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_29_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_29_R_ = (AVR_R[AVR_EOR_RD__RD_x_x_d] ^ AVR_R[AVR_EOR_RD__RD_x_x_r]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_29_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 4)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_29_R_)) == 0), 1, 1);
		AVR_R[AVR_EOR_RD__RD_x_x_d] = __gliss_29_R_;
	}

}

/* ORI R%d, %d */
static void avr_instr_ORI_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_28_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_28_R_ = (AVR_R[(16 + ((uint32_t)(AVR_ORI_RD__D_x_x_d)))] | AVR_ORI_RD__D_x_x_k);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_28_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 4)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_28_R_)) == 0), 1, 1);
		AVR_R[AVR_ORI_RD__D_x_x_d] = __gliss_28_R_;
	}

}

/* OR R%d, R%d */
static void avr_instr_OR_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_27_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_27_R_ = (AVR_R[AVR_OR_RD__RD_x_x_d] | AVR_R[AVR_OR_RD__RD_x_x_r]);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_27_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 4)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_27_R_)) == 0), 1, 1);
		AVR_R[AVR_OR_RD__RD_x_x_d] = __gliss_27_R_;
	}

}

/* ANDI R%d, R%d */
static void avr_instr_ANDI_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_26_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_26_R_ = (AVR_R[(16 + ((uint32_t)(AVR_ANDI_RD__RD_x_x_d)))] & AVR_ANDI_RD__RD_x_x_k);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_26_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(AVR_SREG, 2), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_26_R_)) == 0), 1, 1);
		AVR_R[(16 + ((uint32_t)(AVR_ANDI_RD__RD_x_x_d)))] = __gliss_26_R_;
	}

}

/* AND R%d, R%d */
static void avr_instr_AND_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_25_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_25_R_ = (AVR_R[AVR_AND_RD__RD_x_x_d] & AVR_R[AVR_AND_RD__RD_x_x_r]);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_25_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit32(AVR_SREG, 2), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_25_R_)) == 0), 1, 1);
		AVR_R[AVR_AND_RD__RD_x_x_d] = __gliss_25_R_;
	}

}

/* SBIW R%d:R%d, %d */
static void avr_instr_SBIW_RD_3ARD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	uint16_t __gliss_24_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_24_R_ = (avr_concat16(AVR_R[((24 + (((uint32_t)(AVR_SBIW_RD_3ARD__D_x_x_d)) * 2)) + 1)], AVR_R[(24 + (((uint32_t)(AVR_SBIW_RD_3ARD__D_x_x_d)) * 2))], 8, 8) - ((uint16_t)(AVR_SBIW_RD_3ARD__D_x_x_k)));
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit8(AVR_R[((24 + (((uint32_t)(AVR_SBIW_RD_3ARD__D_x_x_d)) * 2)) + 1)], 7) & !avr_bit16(__gliss_24_R_, 15)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_24_R_, 15), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_24_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit16(__gliss_24_R_, 15) & !avr_bit8(AVR_R[((24 + (((uint32_t)(AVR_SBIW_RD_3ARD__D_x_x_d)) * 2)) + 1)], 7)), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		__gtmp_0 = __gliss_24_R_;
		AVR_R[((24 + (((uint32_t)(AVR_SBIW_RD_3ARD__D_x_x_d)) * 2)) + 1)] = (__gtmp_0 >> 8);
		AVR_R[(24 + (((uint32_t)(AVR_SBIW_RD_3ARD__D_x_x_d)) * 2))] = __gtmp_0;
	}

}

/* SBCI R%d, %d */
static void avr_instr_SBCI_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_23_tmp_Z;
	uint8_t __gliss_22_R_;
	uint32_t __gliss_21_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_21_dl = (16 + ((uint32_t)(AVR_SBCI_RD__D_x_x_d)));
		__gliss_22_R_ = ((AVR_R[__gliss_21_dl] - AVR_SBCI_RD__D_x_x_k) - ((uint8_t)(avr_bit32(AVR_SREG, 0))));
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_22_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((avr_bit8(AVR_R[__gliss_21_dl], 7) & !(avr_bit8(AVR_SBCI_RD__D_x_x_k, 7) & !avr_bit8(__gliss_22_R_, 7))) | !((avr_bit8(AVR_R[__gliss_21_dl], 7) & avr_bit8(AVR_SBCI_RD__D_x_x_k, 7)) & avr_bit8(__gliss_22_R_, 7))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[__gliss_21_dl], 3) & avr_bit8(AVR_SBCI_RD__D_x_x_k, 3)) | (avr_bit8(AVR_SBCI_RD__D_x_x_k, 3) & avr_bit8(__gliss_22_R_, 3))) | (avr_bit8(__gliss_22_R_, 3) & !avr_bit8(AVR_R[__gliss_21_dl], 3))), 5, 5);
		__gliss_23_tmp_Z = (((uint32_t)(__gliss_22_R_)) == 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint8_t)(__gliss_23_tmp_Z)) & avr_bit32(AVR_SREG, 1)), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[__gliss_21_dl], 7) & avr_bit8(AVR_SBCI_RD__D_x_x_k, 7)) | (avr_bit8(AVR_SBCI_RD__D_x_x_k, 7) & avr_bit8(__gliss_22_R_, 7))) | (avr_bit8(__gliss_22_R_, 7) & avr_bit8(AVR_R[__gliss_21_dl], 7))), 0, 0);
		AVR_R[AVR_SBCI_RD__D_x_x_d] = __gliss_22_R_;
	}

}

/* SBC R%d, R%d */
static void avr_instr_SBC_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_20_tmp_Z;
	uint8_t __gliss_19_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_19_R_ = ((AVR_R[AVR_SBC_RD__RD_x_x_d] - AVR_R[AVR_SBC_RD__RD_x_x_r]) - ((uint8_t)(avr_bit32(AVR_SREG, 0))));
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_19_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_d], 7) & !(avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_r], 7) & !avr_bit8(__gliss_19_R_, 7))) | ((avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_r], 7)) & avr_bit8(__gliss_19_R_, 7))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_d], 3) & avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_r], 3)) | (avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_r], 3) & avr_bit8(__gliss_19_R_, 3))) | (avr_bit8(__gliss_19_R_, 3) & !avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_d], 3))), 5, 5);
		__gliss_20_tmp_Z = (((uint32_t)(__gliss_19_R_)) == 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint8_t)(__gliss_20_tmp_Z)) & avr_bit32(AVR_SREG, 1)), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_r], 7)) | (avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_r], 7) & avr_bit8(__gliss_19_R_, 7))) | (avr_bit8(__gliss_19_R_, 7) & avr_bit8(AVR_R[AVR_SBC_RD__RD_x_x_d], 7))), 0, 0);
		AVR_R[AVR_SBC_RD__RD_x_x_d] = __gliss_19_R_;
	}

}

/* SUBI R%d, %d */
static void avr_instr_SUBI_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_18_R_;
	uint32_t __gliss_17_dl;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_17_dl = (16 + ((uint32_t)(AVR_SUBI_RD__D_x_x_d)));
		__gliss_18_R_ = (AVR_R[__gliss_17_dl] - AVR_SUBI_RD__D_x_x_k);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[__gliss_17_dl], 3) & avr_bit8(AVR_SUBI_RD__D_x_x_k, 3)) | (avr_bit8(AVR_SUBI_RD__D_x_x_k, 3) & avr_bit8(__gliss_18_R_, 3))) | (avr_bit8(__gliss_18_R_, 3) & !avr_bit8(AVR_R[__gliss_17_dl], 3))), 5, 5);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_18_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((avr_bit8(AVR_R[__gliss_17_dl], 7) & !(avr_bit8(AVR_SUBI_RD__D_x_x_k, 7) & !avr_bit8(__gliss_18_R_, 7))) | ((avr_bit8(AVR_R[__gliss_17_dl], 7) & avr_bit8(AVR_SUBI_RD__D_x_x_k, 7)) & avr_bit8(__gliss_18_R_, 7))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_18_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[__gliss_17_dl], 7) & avr_bit8(AVR_SUBI_RD__D_x_x_k, 7)) | (avr_bit8(AVR_SUBI_RD__D_x_x_k, 7) & avr_bit8(__gliss_18_R_, 7))) | (avr_bit8(__gliss_18_R_, 7) & !avr_bit8(AVR_R[__gliss_17_dl], 7))), 0, 0);
		AVR_R[__gliss_17_dl] = __gliss_18_R_;
	}

}

/* SUB R%d, R%d */
static void avr_instr_SUB_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_16_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_16_R_ = (AVR_R[AVR_SUB_RD__RD_x_x_d] - AVR_R[AVR_SUB_RD__RD_x_x_r]);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_d], 3) & avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_r], 3)) | (avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_r], 3) & avr_bit8(__gliss_16_R_, 3))) | (avr_bit8(__gliss_16_R_, 3) & avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_d], 3))), 5, 5);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_16_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_16_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, ((avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_d], 7) & !(avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_r], 7) & avr_bit8(__gliss_16_R_, 7))) | !((avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_r], 7)) & avr_bit8(__gliss_16_R_, 7))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, ((!(avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_r], 7)) | (avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_r], 7) & avr_bit8(__gliss_16_R_, 7))) | (avr_bit8(__gliss_16_R_, 7) & !avr_bit8(AVR_R[AVR_SUB_RD__RD_x_x_d], 7))), 0, 0);
		AVR_R[AVR_SUB_RD__RD_x_x_d] = __gliss_16_R_;
	}

}

/* ADIW R%d:R%d, %d */
static void avr_instr_ADIW_RD_3ARD__D_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	uint16_t __gliss_15_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_15_R_ = (avr_concat16(AVR_R[((24 + (((uint32_t)(AVR_ADIW_RD_3ARD__D_x_x_d)) * 2)) + 1)], AVR_R[(24 + (((uint32_t)(AVR_ADIW_RD_3ARD__D_x_x_d)) * 2))], 8, 8) + ((uint16_t)(AVR_ADIW_RD_3ARD__D_x_x_k)));
		AVR_SREG = avr_set_field32(AVR_SREG, !(avr_bit8(AVR_R[((24 + (((uint32_t)(AVR_ADIW_RD_3ARD__D_x_x_d)) * 2)) + 1)], 7) & avr_bit16(__gliss_15_R_, 15)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit16(__gliss_15_R_, 15), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_15_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, !(avr_bit16(__gliss_15_R_, 15) & avr_bit8(AVR_R[((24 + (((uint32_t)(AVR_ADIW_RD_3ARD__D_x_x_d)) * 2)) + 1)], 7)), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		__gtmp_0 = __gliss_15_R_;
		AVR_R[((24 + (((uint32_t)(AVR_ADIW_RD_3ARD__D_x_x_d)) * 2)) + 1)] = (__gtmp_0 >> 8);
		AVR_R[(24 + (((uint32_t)(AVR_ADIW_RD_3ARD__D_x_x_d)) * 2))] = __gtmp_0;
	}

}

/* ADC R%d, R%d */
static void avr_instr_ADC_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_14_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_14_R_ = ((AVR_R[AVR_ADC_RD__RD_x_x_d] + AVR_R[AVR_ADC_RD__RD_x_x_r]) + ((uint8_t)(avr_bit32(AVR_SREG, 0))));
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_r], 7)) | (avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_r], 7) & !avr_bit8(__gliss_14_R_, 7))) | !(avr_bit8(__gliss_14_R_, 7) & avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_d], 7))), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_14_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_14_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_r], 7)) & !avr_bit8(__gliss_14_R_, 7)) | !(avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_d], 7) & !(avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_r], 7) & avr_bit8(__gliss_14_R_, 7)))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_d], 3) & avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_r], 3)) | (avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_r], 3) & !avr_bit8(__gliss_14_R_, 3))) | !(avr_bit8(__gliss_14_R_, 3) & avr_bit8(AVR_R[AVR_ADC_RD__RD_x_x_d], 3))), 5, 5);
		AVR_R[AVR_ADC_RD__RD_x_x_d] = __gliss_14_R_;
	}

}

/* ADD R%d, R%d */
static void avr_instr_ADD_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_13_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_13_R_ = (AVR_R[AVR_ADD_RD__RD_x_x_d] + AVR_R[AVR_ADD_RD__RD_x_x_r]);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_r], 7)) | (avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_r], 7) & !avr_bit8(__gliss_13_R_, 7))) | !(avr_bit8(__gliss_13_R_, 7) & avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_d], 7))), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_13_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_13_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_d], 7) & avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_r], 7)) & !avr_bit8(__gliss_13_R_, 7)) | !(avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_d], 7) & !(avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_r], 7) & avr_bit8(__gliss_13_R_, 7)))), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_SREG = avr_set_field32(AVR_SREG, (((avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_d], 3) & avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_r], 3)) | (avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_r], 3) & !avr_bit8(__gliss_13_R_, 3))) | !(avr_bit8(__gliss_13_R_, 3) & avr_bit8(AVR_R[AVR_ADD_RD__RD_x_x_d], 3))), 5, 5);
		AVR_R[AVR_ADD_RD__RD_x_x_d] = __gliss_13_R_;
	}

}

/* CBI IO%d, %d */
static void avr_instr_CBI_IOD__D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_IO[AVR_CBI_IOD__D_x_x_a] = avr_set_field8_generic(AVR_IO[AVR_CBI_IOD__D_x_x_a], ((uint8_t)(0)), AVR_CBI_IOD__D_x_x_b, AVR_CBI_IOD__D_x_x_b, 1);
	}

}

/* SBI IO%d, %d */
static void avr_instr_SBI_IOD__D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_IO[AVR_SBI_IOD__D_x_x_a] = avr_set_field8_generic(AVR_IO[AVR_SBI_IOD__D_x_x_a], ((uint8_t)(1)), AVR_SBI_IOD__D_x_x_b, AVR_SBI_IOD__D_x_x_b, 1);
	}

}

/* CLH */
static void avr_instr_CLH_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 5, 5);
	}

}

/* SEH */
static void avr_instr_SEH_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 5, 5);
	}

}

/* CLT */
static void avr_instr_CLT_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 6, 6);
	}

}

/* SET */
static void avr_instr_SET_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 6, 6);
	}

}

/* CLV */
static void avr_instr_CLV_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 3, 3);
	}

}

/* SEV */
static void avr_instr_SEV_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 3, 3);
	}

}

/* CLS */
static void avr_instr_CLS_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 4, 4);
	}

}

/* SES */
static void avr_instr_SES_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 4, 4);
	}

}

/* CLI */
static void avr_instr_CLI_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field8(AVR_SREG, ((uint8_t)(0)), 7, 7);
	}

}

/* SEI */
static void avr_instr_SEI_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field8(AVR_SREG, ((uint8_t)(1)), 7, 7);
	}

}

/* CLZ */
static void avr_instr_CLZ_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 1, 1);
	}

}

/* SEZ */
static void avr_instr_SEZ_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 1, 1);
	}

}

/* CLN */
static void avr_instr_CLN_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 2, 2);
	}

}

/* SEN */
static void avr_instr_SEN_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 2, 2);
	}

}

/* CLC */
static void avr_instr_CLC_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 0, 0);
	}

}

/* SEC */
static void avr_instr_SEC_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(1)), 0, 0);
	}

}

/* BST R%d, %d */
static void avr_instr_BST_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(avr_field8_generic(AVR_R[AVR_BST_RD__D_x_x_d], AVR_BST_RD__D_x_x_b, AVR_BST_RD__D_x_x_b, 1 ))), 6, 6);
	}

}

/* BLD R%d, %d */
static void avr_instr_BLD_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_R[AVR_BLD_RD__D_x_x_d] = avr_set_field8_generic(AVR_R[AVR_BLD_RD__D_x_x_d], ((uint8_t)(avr_bit32(AVR_SREG, 6))), AVR_BLD_RD__D_x_x_b, AVR_BLD_RD__D_x_x_b, 1);
	}

}

/* SWAP R%d */
static void avr_instr_SWAP_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint32_t __gliss_12_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_12_R_ = (((((uint32_t)(AVR_R[AVR_SWAP_RD_x_x_d])) & 240) >> 4) | ((((uint32_t)(AVR_R[AVR_SWAP_RD_x_x_d])) & 15) << 4));
		AVR_R[AVR_SWAP_RD_x_x_d] = ((uint8_t)(__gliss_12_R_));
	}

}

/* ASR R%d */
static void avr_instr_ASR_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_11_R_;
	uint8_t __gliss_10_bit7;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_10_bit7 = avr_bit8(AVR_R[AVR_ASR_RD_x_x_d], 7);
		__gliss_11_R_ = ((AVR_R[AVR_ASR_RD_x_x_d] >> 1) | ((uint8_t)(__AVR_MASK32(1, (__gliss_10_bit7 << 7)))));
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(AVR_R[AVR_ASR_RD_x_x_d], 0), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_11_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_11_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 0) ^ avr_bit32(AVR_SREG, 2)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 3) ^ avr_bit32(AVR_SREG, 2)), 4, 4);
		AVR_R[AVR_ASR_RD_x_x_d] = __gliss_11_R_;
	}

}

/* ROR R%d */
static void avr_instr_ROR_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_9_R_;
	uint8_t __gliss_8_b0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_8_b0 = avr_bit8(AVR_R[AVR_ROR_RD_x_x_d], 0);
		__gliss_9_R_ = ((AVR_R[AVR_ROR_RD_x_x_d] >> 1) | ((uint8_t)(__AVR_MASK32(1, (avr_bit32(AVR_SREG, 0) << 7)))));
		AVR_SREG = avr_set_field32(AVR_SREG, __gliss_8_b0, 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_9_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(__gliss_9_R_, 7), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 3)), 4, 4);
		AVR_R[AVR_ROR_RD_x_x_d] = __gliss_9_R_;
	}

}

/* LSR R%d */
static void avr_instr_LSR_RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_7_R_;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_7_R_ = (AVR_R[AVR_LSR_RD_x_x_d] >> 1);
		AVR_SREG = avr_set_field32(AVR_SREG, avr_bit8(AVR_R[AVR_LSR_RD_x_x_d], 0), 0, 0);
		AVR_SREG = avr_set_field32(AVR_SREG, (((uint32_t)(__gliss_7_R_)) == 0), 1, 1);
		AVR_SREG = avr_set_field32(AVR_SREG, ((uint8_t)(0)), 2, 2);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 2) ^ avr_bit32(AVR_SREG, 0)), 3, 3);
		AVR_SREG = avr_set_field32(AVR_SREG, (avr_bit32(AVR_SREG, 3) ^ avr_bit32(AVR_SREG, 2)), 4, 4);
		AVR_R[AVR_LSR_RD_x_x_d] = __gliss_7_R_;
	}

}

/* LPM R%d, Z+ */
static void avr_instr_LPM_RD__Z_P__code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit16(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32), 0))) == 0))
			AVR_R[AVR_LPM_RD__Z_P__x_x_d] = ((uint8_t)((((uint32_t)(avr_mem_read8(AVR_FLASH, avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)))) & 255LU)));
		else
			AVR_R[AVR_LPM_RD__Z_P__x_x_d] = ((uint8_t)(((((uint32_t)(avr_mem_read8(AVR_FLASH, avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)))) & 65280LU) >> 8)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) + 1)));
		AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(30 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* LPM R%d, Z */
static void avr_instr_LPM_RD__Z_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit16(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32), 0))) == 0))
			AVR_R[AVR_LPM_RD__Z_x_x_d] = ((uint8_t)((((uint32_t)(avr_mem_read8(AVR_FLASH, avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)))) & 255LU)));
		else
			AVR_R[AVR_LPM_RD__Z_x_x_d] = ((uint8_t)(((((uint32_t)(avr_mem_read8(AVR_FLASH, avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)))) & 65280LU) >> 8)));
	}

}

/* LPM */
static void avr_instr_LPM_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_bit16(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32), 0))) == 0))
			AVR_R[0] = ((uint8_t)((((uint32_t)(avr_mem_read8(AVR_FLASH, avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)))) & 255LU)));
		else
			AVR_R[0] = ((uint8_t)(((((uint32_t)(avr_mem_read8(AVR_FLASH, avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)))) & 65280LU) >> 8)));
	}

}

/* LAC Z, R%d */
static void avr_instr_LAC_Z__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_6_data;
	uint8_t __gliss_5_tmp;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_5_tmp = 0;
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			__gliss_5_tmp = AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				__gliss_5_tmp = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)];
			else
				__gliss_5_tmp = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96));
		}
		__gliss_6_data = ((255LU - ((uint32_t)(AVR_R[AVR_LAC_Z__RD_x_x_d]))) & ((uint32_t)(__gliss_5_tmp)));
		AVR_R[AVR_LAC_Z__RD_x_x_d] = __gliss_5_tmp;
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)] = __gliss_6_data;
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)] = __gliss_6_data;
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96), __gliss_6_data);
		}
	}

}

/* LAT Z, R%d */
static void avr_instr_LAT_Z__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_4_data;
	uint8_t __gliss_3_tmp;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_3_tmp = 0;
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			__gliss_3_tmp = AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				__gliss_3_tmp = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)];
			else
				__gliss_3_tmp = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96));
		}
		__gliss_4_data = (AVR_R[AVR_LAT_Z__RD_x_x_d] ^ __gliss_3_tmp);
		AVR_R[AVR_LAT_Z__RD_x_x_d] = __gliss_3_tmp;
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)] = __gliss_4_data;
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)] = __gliss_4_data;
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96), __gliss_4_data);
		}
	}

}

/* LAS Z, R%d */
static void avr_instr_LAS_Z__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint8_t __gliss_2_data;
	uint8_t __gliss_1_tmp;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_1_tmp = 0;
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			__gliss_1_tmp = AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				__gliss_1_tmp = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)];
			else
				__gliss_1_tmp = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96));
		}
		__gliss_2_data = (AVR_R[AVR_LAS_Z__RD_x_x_d] | __gliss_1_tmp);
		AVR_R[AVR_LAS_Z__RD_x_x_d] = __gliss_1_tmp;
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)] = __gliss_2_data;
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)] = __gliss_2_data;
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96), __gliss_2_data);
		}
	}

}

/* XCH Z, R%d */
static void avr_instr_XCH_Z__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_2;
	uint16_t __gtmp_1;
	uint16_t __gtmp_0;
	uint8_t __gliss_0_tmp;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gliss_0_tmp = 0;
		if((((uint32_t)(__gliss_0_tmp)) < 32)) {
			__gtmp_2 = ((uint16_t)(AVR_R[__gliss_0_tmp]));
			AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_2, 63, 32);
			AVR_R[(30 * 2)] = avr_field16(__gtmp_2, 31, 0);
		}
		else {
			if((((uint32_t)(__gliss_0_tmp)) < 96)) {
				__gtmp_1 = ((uint16_t)(AVR_IO[(((uint32_t)(__gliss_0_tmp)) - 32)]));
				AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_1, 63, 32);
				AVR_R[(30 * 2)] = avr_field16(__gtmp_1, 31, 0);
			}
			else {
				__gtmp_0 = ((uint16_t)(avr_mem_read8(AVR_M, (((uint32_t)(__gliss_0_tmp)) - 96))));
				AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
				AVR_R[(30 * 2)] = avr_field16(__gtmp_0, 31, 0);
			}
		}
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)] = AVR_R[AVR_XCH_Z__RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)] = AVR_R[AVR_XCH_Z__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96), AVR_R[AVR_XCH_Z__RD_x_x_d]);
		}
		AVR_R[AVR_XCH_Z__RD_x_x_d] = __gliss_0_tmp;
	}

}

/* POP R%d */
static void avr_instr_POP_RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) + 1)));
		if((((uint32_t)(AVR_SP)) < 32))
			AVR_R[AVR_POP_RD_x_x_d] = AVR_R[AVR_SP];
		else {
			if((((uint32_t)(AVR_SP)) < 96))
				AVR_R[AVR_POP_RD_x_x_d] = AVR_IO[(((uint32_t)(AVR_SP)) - 32)];
			else
				AVR_R[AVR_POP_RD_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(AVR_SP)) - 96));
		}
	}

}

/* PUSH R%d */
static void avr_instr_PUSH_RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(AVR_SP)) < 32))
			AVR_R[AVR_SP] = AVR_R[AVR_PUSH_RD_x_x_d];
		else {
			if((((uint32_t)(AVR_SP)) < 96))
				AVR_IO[(((uint32_t)(AVR_SP)) - 32)] = AVR_R[AVR_PUSH_RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(AVR_SP)) - 96), AVR_R[AVR_PUSH_RD_x_x_d]);
		}
		AVR_SP = ((uint16_t)((((uint32_t)(AVR_SP)) - 1)));
	}

}

/* OUT %d, R%d */
static void avr_instr_OUT_D__RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_IO[AVR_OUT_D__RD_x_x_a] = AVR_R[AVR_OUT_D__RD_x_x_d];
	}

}

/* IN R%d, %d */
static void avr_instr_IN_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_R[AVR_IN_RD__D_x_x_d] = AVR_IO[AVR_IN_RD__D_x_x_a];
	}

}

/* ST Z+, R%d */
static void avr_instr_ST_Z_P___RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)] = AVR_R[AVR_ST_Z_P___RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST_Z_P___RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96), AVR_R[AVR_ST_Z_P___RD_x_x_d]);
		}
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) + 1)));
		AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(30 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* ST -Z, R%d */
static void avr_instr_ST__M_Z__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 1)));
		AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(30 * 2)] = avr_field16(__gtmp_0, 31, 0);
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)] = AVR_R[AVR_ST__M_Z__RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST__M_Z__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96), AVR_R[AVR_ST__M_Z__RD_x_x_d]);
		}
	}

}

/* STD Z+%d, R%d */
static void avr_instr_STD_Z_P_D__RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Z_P_D__RD_x_x_q))))) < 32))
			AVR_R[(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Z_P_D__RD_x_x_q)))] = AVR_R[AVR_STD_Z_P_D__RD_x_x_d];
		else {
			if((((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Z_P_D__RD_x_x_q))))) < 96))
				AVR_IO[(((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Z_P_D__RD_x_x_q))))) - 32)] = AVR_R[AVR_STD_Z_P_D__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Z_P_D__RD_x_x_q))))) - 96), AVR_R[AVR_STD_Z_P_D__RD_x_x_d]);
		}
	}

}

/* ST Y+, R%d */
static void avr_instr_ST_Y_P___RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32)] = AVR_R[AVR_ST_Y_P___RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST_Y_P___RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 96), AVR_R[AVR_ST_Y_P___RD_x_x_d]);
		}
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) + 1)));
		AVR_R[((28 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(28 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* ST -Y, R%d */
static void avr_instr_ST__M_Y__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 1)));
		AVR_R[((28 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(28 * 2)] = avr_field16(__gtmp_0, 31, 0);
		if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32)] = AVR_R[AVR_ST__M_Y__RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST__M_Y__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 96), AVR_R[AVR_ST__M_Y__RD_x_x_d]);
		}
	}

}

/* STD Y+%d, R%d */
static void avr_instr_STD_Y_P_D__RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Y_P_D__RD_x_x_q))))) < 32))
			AVR_R[(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Y_P_D__RD_x_x_q)))] = AVR_R[AVR_STD_Y_P_D__RD_x_x_d];
		else {
			if((((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Y_P_D__RD_x_x_q))))) < 96))
				AVR_IO[(((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Y_P_D__RD_x_x_q))))) - 32)] = AVR_R[AVR_STD_Y_P_D__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_STD_Y_P_D__RD_x_x_q))))) - 96), AVR_R[AVR_STD_Y_P_D__RD_x_x_d]);
		}
	}

}

/* ST X+, R%d */
static void avr_instr_ST_X_P___RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32)] = AVR_R[AVR_ST_X_P___RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST_X_P___RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 96), AVR_R[AVR_ST_X_P___RD_x_x_d]);
		}
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) + 1)));
		AVR_R[((26 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(26 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* ST -X, R%d */
static void avr_instr_ST__M_X__RD_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 1)));
		AVR_R[((26 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(26 * 2)] = avr_field16(__gtmp_0, 31, 0);
		if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32)] = AVR_R[AVR_ST__M_X__RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST__M_X__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 96), AVR_R[AVR_ST__M_X__RD_x_x_d]);
		}
	}

}

/* ST X, R%d */
static void avr_instr_ST_X__RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 32))
			AVR_R[avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32)] = AVR_R[AVR_ST_X__RD_x_x_d];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 96))
				AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 32)] = AVR_R[AVR_ST_X__RD_x_x_d];
			else
				avr_mem_write8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 96), AVR_R[AVR_ST_X__RD_x_x_d]);
		}
	}

}

/* LDD R%d, Z+%d */
static void avr_instr_LDD_RD__Z_P_D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Z_P_D_x_x_q))))) < 32))
			AVR_R[AVR_LDD_RD__Z_P_D_x_x_d] = AVR_R[(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Z_P_D_x_x_q)))];
		else {
			if((((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Z_P_D_x_x_q))))) < 96))
				AVR_R[AVR_LDD_RD__Z_P_D_x_x_d] = AVR_IO[(((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Z_P_D_x_x_q))))) - 32)];
			else
				AVR_R[AVR_LDD_RD__Z_P_D_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)((avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Z_P_D_x_x_q))))) - 96));
		}
	}

}

/* LD R%d, -Z */
static void avr_instr_LD_RD___M_Z_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 1)));
		AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(30 * 2)] = avr_field16(__gtmp_0, 31, 0);
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD___M_Z_x_x_d] = AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD___M_Z_x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD___M_Z_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96));
		}
	}

}

/* LD R%d, Z+ */
static void avr_instr_LD_RD__Z_P__code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD__Z_P__x_x_d] = AVR_R[avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD__Z_P__x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD__Z_P__x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) - 96));
		}
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((30 * 2) + 1)], AVR_R[(30 * 2)], 32, 32))) + 1)));
		AVR_R[((30 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(30 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* LDD R%d, Y+%d */
static void avr_instr_LDD_RD__Y_P_D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Y_P_D_x_x_q))))) < 32))
			AVR_R[AVR_LDD_RD__Y_P_D_x_x_d] = AVR_R[(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Y_P_D_x_x_q)))];
		else {
			if((((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Y_P_D_x_x_q))))) < 96))
				AVR_R[AVR_LDD_RD__Y_P_D_x_x_d] = AVR_IO[(((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Y_P_D_x_x_q))))) - 32)];
			else
				AVR_R[AVR_LDD_RD__Y_P_D_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)((avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32) + ((uint16_t)(AVR_LDD_RD__Y_P_D_x_x_q))))) - 96));
		}
	}

}

/* LD R%d, -Y */
static void avr_instr_LD_RD___M_Y_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 1)));
		AVR_R[((28 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(28 * 2)] = avr_field16(__gtmp_0, 31, 0);
		if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD___M_Y_x_x_d] = AVR_R[avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD___M_Y_x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD___M_Y_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 96));
		}
	}

}

/* LD R%d, Y+ */
static void avr_instr_LD_RD__Y_P__code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD__Y_P__x_x_d] = AVR_R[avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD__Y_P__x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD__Y_P__x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) - 96));
		}
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((28 * 2) + 1)], AVR_R[(28 * 2)], 32, 32))) + 1)));
		AVR_R[((28 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(28 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* LD R%d, -X */
static void avr_instr_LD_RD___M_X_code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 1)));
		AVR_R[((26 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(26 * 2)] = avr_field16(__gtmp_0, 31, 0);
		if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD___M_X_x_x_d] = AVR_R[avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD___M_X_x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD___M_X_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 96));
		}
	}

}

/* LD R%d, X+ */
static void avr_instr_LD_RD__X_P__code(avr_state_t *state, avr_inst_t *inst) {
	uint16_t __gtmp_0;
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD__X_P__x_x_d] = AVR_R[avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD__X_P__x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD__X_P__x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 96));
		}
		__gtmp_0 = ((uint16_t)((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) + 1)));
		AVR_R[((26 * 2) + 1)] = avr_field16(__gtmp_0, 63, 32);
		AVR_R[(26 * 2)] = avr_field16(__gtmp_0, 31, 0);
	}

}

/* LD R%d, X */
static void avr_instr_LD_RD__X_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 32))
			AVR_R[AVR_LD_RD__X_x_x_d] = AVR_R[avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32)];
		else {
			if((((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) < 96))
				AVR_R[AVR_LD_RD__X_x_x_d] = AVR_IO[(((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 32)];
			else
				AVR_R[AVR_LD_RD__X_x_x_d] = avr_mem_read8(AVR_M, (((uint32_t)(avr_concat16(AVR_R[((26 * 2) + 1)], AVR_R[(26 * 2)], 32, 32))) - 96));
		}
	}

}

/* MOVW R%d:%d, R%d:%d */
static void avr_instr_MOVW_RD_3AD__RD_3AD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		avr_assert(state, (((((uint32_t)(AVR_MOVW_RD_3AD__RD_3AD_x_x_d)) % 2) != 0) || ((((uint32_t)(AVR_MOVW_RD_3AD__RD_3AD_x_x_r)) % 2) != 0)), "DTInstructions.nmp", 44);
		AVR_R[AVR_MOVW_RD_3AD__RD_3AD_x_x_d] = AVR_R[AVR_MOVW_RD_3AD__RD_3AD_x_x_r];
		AVR_R[(((uint32_t)(AVR_MOVW_RD_3AD__RD_3AD_x_x_d)) + 1)] = AVR_R[(((uint32_t)(AVR_MOVW_RD_3AD__RD_3AD_x_x_r)) + 1)];
	}

}

/* MOV R%d, R%d */
static void avr_instr_MOV_RD__RD_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_R[AVR_MOV_RD__RD_x_x_d] = AVR_R[AVR_MOV_RD__RD_x_x_r];
	}

}

/* LDI R%d, %d */
static void avr_instr_LDI_RD__D_code(avr_state_t *state, avr_inst_t *inst) {
	if((((uint32_t)(AVR_SKIP_NEXT)) == 1)) {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_SKIP_NEXT = ((uint8_t)(0));
	}
	else {
		AVR_PC = ((uint16_t)((((uint32_t)(AVR_PC)) + 2)));
		AVR_R[(((uint32_t)(AVR_LDI_RD__D_x_x_d)) + 16)] = AVR_LDI_RD__D_x_x_k;
	}

}




typedef void (*avr_code_function_t)(avr_state_t *, avr_inst_t *);

avr_code_function_t avr_code_table[] =
{
	avr_instr_UNKNOWN_code,
	avr_instr_CALL_D__LP_04X_RP__code,
	avr_instr_JMP_D__LP_04X_RP__code,
	avr_instr_STS_D__RD_code,
	avr_instr_LDS_RD__0X04X_code,
	avr_instr_BRID___P_D__3B__P_04X_code,
	avr_instr_BRIE___P_D__3B__P_04X_code,
	avr_instr_BRVC___P_D__3B__P_04X_code,
	avr_instr_BRVS___P_D__3B__P_04X_code,
	avr_instr_BRTC___P_D__3B__P_04X_code,
	avr_instr_BRTS___P_D__3B__P_04X_code,
	avr_instr_BRHC___P_D__3B__P_04X_code,
	avr_instr_BRHS___P_D__3B__P_04X_code,
	avr_instr_BRLT___P_D__3B__P_04X_code,
	avr_instr_BRGE___P_D__3B__P_04X_code,
	avr_instr_BRPL___P_D__3B__P_04X_code,
	avr_instr_BRMI___P_D__3B__P_04X_code,
	avr_instr_BRCC___P_D__3B__P_04X_code,
	avr_instr_BRCS___P_D__3B__P_04X_code,
	avr_instr_BRNE___P_D__3B__P_04X_code,
	avr_instr_BREQ___P_D__3B__P_04X_code,
	avr_instr_SBIC_IOD__D_code,
	avr_instr_SBIC_IOD__D_0_code,
	avr_instr_SBRS_RD__D_code,
	avr_instr_SBRC_RD__D_code,
	avr_instr_CPI_RD__0X02X__3B_D_code,
	avr_instr_CPC_RD__RD_code,
	avr_instr_CP_RD__RD_code,
	avr_instr_CSPE_RD__RD_code,
	avr_instr_RETI_code,
	avr_instr_RET_code,
	avr_instr_ICALL_code,
	avr_instr_RCALL_D__LP_04X_RP__code,
	avr_instr_IJMP_code,
	avr_instr_RJMP___P_D__3B_04X_code,
	avr_instr_FMULSU_RD__RD_code,
	avr_instr_FMULS_RD__RD_code,
	avr_instr_FMUL_RD__RD_code,
	avr_instr_MULSU_RD__RD_code,
	avr_instr_MULS_RD__RD_code,
	avr_instr_MUL_RD__RD_code,
	avr_instr_DEC_RD_code,
	avr_instr_INC_RD_code,
	avr_instr_NEG_RD_code,
	avr_instr_COM_RD_code,
	avr_instr_EOR_RD__RD_code,
	avr_instr_ORI_RD__D_code,
	avr_instr_OR_RD__RD_code,
	avr_instr_ANDI_RD__RD_code,
	avr_instr_AND_RD__RD_code,
	avr_instr_SBIW_RD_3ARD__D_code,
	avr_instr_SBCI_RD__D_code,
	avr_instr_SBC_RD__RD_code,
	avr_instr_SUBI_RD__D_code,
	avr_instr_SUB_RD__RD_code,
	avr_instr_ADIW_RD_3ARD__D_code,
	avr_instr_ADC_RD__RD_code,
	avr_instr_ADD_RD__RD_code,
	avr_instr_CBI_IOD__D_code,
	avr_instr_SBI_IOD__D_code,
	avr_instr_CLH_code,
	avr_instr_SEH_code,
	avr_instr_CLT_code,
	avr_instr_SET_code,
	avr_instr_CLV_code,
	avr_instr_SEV_code,
	avr_instr_CLS_code,
	avr_instr_SES_code,
	avr_instr_CLI_code,
	avr_instr_SEI_code,
	avr_instr_CLZ_code,
	avr_instr_SEZ_code,
	avr_instr_CLN_code,
	avr_instr_SEN_code,
	avr_instr_CLC_code,
	avr_instr_SEC_code,
	avr_instr_BST_RD__D_code,
	avr_instr_BLD_RD__D_code,
	avr_instr_SWAP_RD_code,
	avr_instr_ASR_RD_code,
	avr_instr_ROR_RD_code,
	avr_instr_LSR_RD_code,
	avr_instr_LPM_RD__Z_P__code,
	avr_instr_LPM_RD__Z_code,
	avr_instr_LPM_code,
	avr_instr_LAC_Z__RD_code,
	avr_instr_LAT_Z__RD_code,
	avr_instr_LAS_Z__RD_code,
	avr_instr_XCH_Z__RD_code,
	avr_instr_POP_RD_code,
	avr_instr_PUSH_RD_code,
	avr_instr_OUT_D__RD_code,
	avr_instr_IN_RD__D_code,
	avr_instr_ST_Z_P___RD_code,
	avr_instr_ST__M_Z__RD_code,
	avr_instr_STD_Z_P_D__RD_code,
	avr_instr_ST_Y_P___RD_code,
	avr_instr_ST__M_Y__RD_code,
	avr_instr_STD_Y_P_D__RD_code,
	avr_instr_ST_X_P___RD_code,
	avr_instr_ST__M_X__RD_code,
	avr_instr_ST_X__RD_code,
	avr_instr_LDD_RD__Z_P_D_code,
	avr_instr_LD_RD___M_Z_code,
	avr_instr_LD_RD__Z_P__code,
	avr_instr_LDD_RD__Y_P_D_code,
	avr_instr_LD_RD___M_Y_code,
	avr_instr_LD_RD__Y_P__code,
	avr_instr_LD_RD___M_X_code,
	avr_instr_LD_RD__X_P__code,
	avr_instr_LD_RD__X_code,
	avr_instr_MOVW_RD_3AD__RD_3AD_code,
	avr_instr_MOV_RD__RD_code,
	avr_instr_LDI_RD__D_code
};



#if defined(__cplusplus)
}
#endif

#endif /* GLISS_AVR_INCLUDE_AVR_DECODE_TABLE_H */
