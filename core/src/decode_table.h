/* Generated by gep (125/04/14 21:47:43) copyright (c) 2008 IRIT - UPS */

#ifndef GLISS_AVR_INCLUDE_AVR_DECODE_TABLE_H
#define GLISS_AVR_INCLUDE_AVR_DECODE_TABLE_H

#if defined(__cplusplus)
extern  "C"
{
#endif

#include <assert.h>
#include <avr/api.h>
#include <avr/macros.h>
#include <avr/gen_int.h>

#include <avr/mem.h>
#include <avr/grt.h>
#include <avr/error.h>
#include <avr/gen_int.h>
#include <avr/env.h>
#include <avr/loader.h>
#include <avr/code.h>


/* TODO: add some error messages when malloc fails */
#define gliss_error(e) fprintf(stderr, "%s\n", (e))

/* hack : Enable cache if gep option is on 
(without having to  move decode.c to templates) */


/* decoder macros */
/* CISC, decoded parameters should be 64 bit max */
#define __EXTRACT(mask, inst)	extract_mask(inst, mask)
#define __EXTS(mask, inst, n)	(((int64_t)__EXTRACT(mask, inst) << (64 - n)) >> (64 - n))
#define __EXT_SIGN(t, x, s)	((((t)(x)) << (s))>>(s)


static avr_inst_t *avr_instr_UNKNOWN_decode(mask_t *code_inst)
{
	avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	inst->ident = AVR_UNKNOWN;

return inst;
}

/* CALL %d (%04x) */
static avr_inst_t *avr_instr_CALL_D__LP_04X_RP__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 00000001111100000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0X1FFFF}; /* 00000000000000011111111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_CALL_D__LP_04X_RP_;

	/* put other parameters */
	/* complex decoding */
	AVR_CALL_D__LP_04X_RP__x_x_k = (((__EXTRACT(&mask0, code_inst) & 31) << 17) | ((__EXTRACT(&mask1, code_inst) & 131071LU) << 0))
;

return inst;

}

/* JMP %d (%04x) */
static avr_inst_t *avr_instr_JMP_D__LP_04X_RP__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1F00000}; /* 00000001111100000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = { 0X1FFFF}; /* 00000000000000011111111111111111 */
	static mask_t mask1 = {tab_mask1, 32};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_JMP_D__LP_04X_RP_;

	/* put other parameters */
	/* complex decoding */
	AVR_JMP_D__LP_04X_RP__x_x_k = (((__EXTRACT(&mask0, code_inst) & 31) << 17) | ((__EXTRACT(&mask1, code_inst) & 131071LU) << 0))
;

return inst;

}

/* STS %d, R%d */
static avr_inst_t *avr_instr_STS_D__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 00000001000000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 00000000111100000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XF000}; /* 00000000000000001111000000000000 */
	static mask_t mask2 = {tab_mask2, 32};
	static uint32_t tab_mask3[1] = {   0XF00}; /* 00000000000000000000111100000000 */
	static mask_t mask3 = {tab_mask3, 32};
	static uint32_t tab_mask4[1] = {    0XF0}; /* 00000000000000000000000011110000 */
	static mask_t mask4 = {tab_mask4, 32};
	static uint32_t tab_mask5[1] = {     0XF}; /* 00000000000000000000000000001111 */
	static mask_t mask5 = {tab_mask5, 32};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_STS_D__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_STS_D__RD_x_x_a = (((((__EXTRACT(&mask2, code_inst) & 15) << 12) | ((__EXTRACT(&mask3, code_inst) & 15) << 8)) | ((__EXTRACT(&mask4, code_inst) & 15) << 4)) | ((__EXTRACT(&mask5, code_inst) & 15) << 0))
;
	AVR_STS_D__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LDS R%d, 0x%04x */
static avr_inst_t *avr_instr_LDS_RD__0X04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 00000001000000000000000000000000 */
	static mask_t mask0 = {tab_mask0, 32};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 00000000111100000000000000000000 */
	static mask_t mask1 = {tab_mask1, 32};
	static uint32_t tab_mask2[1] = {  0XFFFF}; /* 00000000000000001111111111111111 */
	static mask_t mask2 = {tab_mask2, 32};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LDS_RD__0X04X;

	/* put other parameters */
	/* complex decoding */
	AVR_LDS_RD__0X04X_x_x_k = ((__EXTRACT(&mask2, code_inst) & 65535LU) << 0)
;
	AVR_LDS_RD__0X04X_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* BRID .%+d ; %+04x */
static avr_inst_t *avr_instr_BRID___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRID___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRID___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRIE .%+d ; %+04x */
static avr_inst_t *avr_instr_BRIE___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRIE___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRIE___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRVC .%+d ; %+04x */
static avr_inst_t *avr_instr_BRVC___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRVC___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRVC___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRVS .%+d ; %+04x */
static avr_inst_t *avr_instr_BRVS___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRVS___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRVS___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRTC .%+d ; %+04x */
static avr_inst_t *avr_instr_BRTC___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRTC___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRTC___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRTS .%+d ; %+04x */
static avr_inst_t *avr_instr_BRTS___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRTS___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRTS___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRHC .%+d ; %+04x */
static avr_inst_t *avr_instr_BRHC___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRHC___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRHC___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRHS .%+d ; %+04x */
static avr_inst_t *avr_instr_BRHS___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRHS___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRHS___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRLT .%+d ; %+04x */
static avr_inst_t *avr_instr_BRLT___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRLT___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRLT___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRGE .%+d ; %+04x */
static avr_inst_t *avr_instr_BRGE___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRGE___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRGE___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BRPL .%+d ; %+04x */
static avr_inst_t *avr_instr_BRPL___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3000000}; /* 0000001100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRPL___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRPL___P_D__3B__P_04X_x_x_k = __AVR_EXTS8(7, ((((__EXTRACT(&mask0, code_inst) & 3) << 5) | ((__EXTRACT(&mask1, code_inst) & 15) << 1)) | ((__EXTRACT(&mask2, code_inst) & 1) << 0)))
;

return inst;

}

/* BRMI .%+d ; %+04x */
static avr_inst_t *avr_instr_BRMI___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3000000}; /* 0000001100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRMI___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRMI___P_D__3B__P_04X_x_x_k = __AVR_EXTS8(7, ((((__EXTRACT(&mask0, code_inst) & 3) << 5) | ((__EXTRACT(&mask1, code_inst) & 15) << 1)) | ((__EXTRACT(&mask2, code_inst) & 1) << 0)))
;

return inst;

}

/* BRCC .%+d ; %+04x */
static avr_inst_t *avr_instr_BRCC___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3000000}; /* 0000001100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRCC___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRCC___P_D__3B__P_04X_x_x_k = __AVR_EXTS8(7, ((((__EXTRACT(&mask0, code_inst) & 3) << 5) | ((__EXTRACT(&mask1, code_inst) & 15) << 1)) | ((__EXTRACT(&mask2, code_inst) & 1) << 0)))
;

return inst;

}

/* BRCS .%+d ; %+04x */
static avr_inst_t *avr_instr_BRCS___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3000000}; /* 0000001100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRCS___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRCS___P_D__3B__P_04X_x_x_k = __AVR_EXTS8(7, ((((__EXTRACT(&mask0, code_inst) & 3) << 5) | ((__EXTRACT(&mask1, code_inst) & 15) << 1)) | ((__EXTRACT(&mask2, code_inst) & 1) << 0)))
;

return inst;

}

/* BRNE .%+d ; %+04x */
static avr_inst_t *avr_instr_BRNE___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BRNE___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BRNE___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* BREQ .%+d ; %+04x */
static avr_inst_t *avr_instr_BREQ___P_D__3B__P_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X3F80000}; /* 0000001111111000 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BREQ___P_D__3B__P_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_BREQ___P_D__3B__P_04X_x_x_k = __EXTS(&mask0, code_inst, 7);

return inst;

}

/* SBIC IO%d, %d */
static avr_inst_t *avr_instr_SBIC_IOD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBIC_IOD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SBIC_IOD__D_x_x_b = ((__EXTRACT(&mask2, code_inst) & 7) << 0)
;
	AVR_SBIC_IOD__D_x_x_a = (((__EXTRACT(&mask0, code_inst) & 15) << 1) | ((__EXTRACT(&mask1, code_inst) & 1) << 0))
;

return inst;

}

/* SBIC IO%d, %d */
static avr_inst_t *avr_instr_SBIC_IOD__D_0_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBIC_IOD__D_0;

	/* put other parameters */
	/* complex decoding */
	AVR_SBIC_IOD__D_0_x_x_b = ((__EXTRACT(&mask2, code_inst) & 7) << 0)
;
	AVR_SBIC_IOD__D_0_x_x_a = (((__EXTRACT(&mask0, code_inst) & 15) << 1) | ((__EXTRACT(&mask1, code_inst) & 1) << 0))
;

return inst;

}

/* SBRS R%d, %d */
static avr_inst_t *avr_instr_SBRS_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBRS_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SBRS_RD__D_x_x_b = __EXTRACT(&mask0, code_inst);
	AVR_SBRS_RD__D_x_x_r = __EXTRACT(&mask1, code_inst);

return inst;

}

/* SBRC R%d, %d */
static avr_inst_t *avr_instr_SBRC_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBRC_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SBRC_RD__D_x_x_b = __EXTRACT(&mask0, code_inst);
	AVR_SBRC_RD__D_x_x_r = __EXTRACT(&mask1, code_inst);

return inst;

}

/* CPI R%d, 0x%02x ; %d */
static avr_inst_t *avr_instr_CPI_RD__0X02X__3B_D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_CPI_RD__0X02X__3B_D;

	/* put other parameters */
	/* complex decoding */
	AVR_CPI_RD__0X02X__3B_D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 15) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_CPI_RD__0X02X__3B_D_x_x_d = __EXTRACT(&mask1, code_inst)
;

return inst;

}

/* CPC R%d, R%d */
static avr_inst_t *avr_instr_CPC_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_CPC_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_CPC_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_CPC_RD__RD_x_x_d = __EXTRACT(&mask1, code_inst)
;

return inst;

}

/* CP R%d, R%d */
static avr_inst_t *avr_instr_CP_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_CP_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_CP_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_CP_RD__RD_x_x_d = __EXTRACT(&mask1, code_inst)
;

return inst;

}

/* CSPE R%d, R%d */
static avr_inst_t *avr_instr_CSPE_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1F00000}; /* 0000000111110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_CSPE_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_CSPE_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_CSPE_RD__RD_x_x_d = __EXTRACT(&mask1, code_inst)
;

return inst;

}

/* RETI */
static avr_inst_t *avr_instr_RETI_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_RETI;

return inst;
}

/* RET */
static avr_inst_t *avr_instr_RET_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_RET;

return inst;
}

/* ICALL */
static avr_inst_t *avr_instr_ICALL_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_ICALL;

return inst;
}

/* RCALL %d (%04x) */
static avr_inst_t *avr_instr_RCALL_D__LP_04X_RP__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFFF0000}; /* 0000111111111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_RCALL_D__LP_04X_RP_;

	/* put other parameters */
	/* complex decoding */
	AVR_RCALL_D__LP_04X_RP__x_x_k = __EXTS(&mask0, code_inst, 12);

return inst;

}

/* IJMP */
static avr_inst_t *avr_instr_IJMP_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_IJMP;

return inst;
}

/* RJMP .%+d ; %04x */
static avr_inst_t *avr_instr_RJMP___P_D__3B_04X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XFFF0000}; /* 0000111111111111 */
	static mask_t mask0 = {tab_mask0, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_RJMP___P_D__3B_04X;

	/* put other parameters */
	/* complex decoding */
	AVR_RJMP___P_D__3B_04X_x_x_k = __AVR_EXTS16(12, ((__EXTRACT(&mask0, code_inst) & 4095LU) << 0))
;

return inst;

}

/* FMULSU R%d, R%d */
static avr_inst_t *avr_instr_FMULSU_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X700000}; /* 0000000001110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_FMULSU_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_FMULSU_RD__RD_x_x_r = ((__EXTRACT(&mask1, code_inst) & 7) << 0)
;
	AVR_FMULSU_RD__RD_x_x_d = ((__EXTRACT(&mask0, code_inst) & 7) << 0)
;

return inst;

}

/* FMULS R%d, R%d */
static avr_inst_t *avr_instr_FMULS_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X700000}; /* 0000000001110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_FMULS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_FMULS_RD__RD_x_x_r = ((__EXTRACT(&mask1, code_inst) & 7) << 0)
;
	AVR_FMULS_RD__RD_x_x_d = ((__EXTRACT(&mask0, code_inst) & 7) << 0)
;

return inst;

}

/* FMUL R%d, R%d */
static avr_inst_t *avr_instr_FMUL_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X700000}; /* 0000000001110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_FMUL_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_FMUL_RD__RD_x_x_r = ((__EXTRACT(&mask1, code_inst) & 7) << 0)
;
	AVR_FMUL_RD__RD_x_x_d = ((__EXTRACT(&mask0, code_inst) & 7) << 0)
;

return inst;

}

/* MULSU R%d, R%d */
static avr_inst_t *avr_instr_MULSU_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X700000}; /* 0000000001110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_MULSU_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_MULSU_RD__RD_x_x_r = ((__EXTRACT(&mask1, code_inst) & 7) << 0)
;
	AVR_MULSU_RD__RD_x_x_d = ((__EXTRACT(&mask0, code_inst) & 7) << 0)
;

return inst;

}

/* MULS R%d, R%d */
static avr_inst_t *avr_instr_MULS_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_MULS_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_MULS_RD__RD_x_x_r = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;
	AVR_MULS_RD__RD_x_x_d = ((__EXTRACT(&mask0, code_inst) & 15) << 0)
;

return inst;

}

/* MUL R%d, R%d */
static avr_inst_t *avr_instr_MUL_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_MUL_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_MUL_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_MUL_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* DEC R%d */
static avr_inst_t *avr_instr_DEC_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_DEC_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_DEC_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* INC R%d */
static avr_inst_t *avr_instr_INC_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_INC_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_INC_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* NEG R%d */
static avr_inst_t *avr_instr_NEG_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_NEG_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_NEG_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* COM R%d */
static avr_inst_t *avr_instr_COM_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_COM_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_COM_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* EOR R%d, R%d */
static avr_inst_t *avr_instr_EOR_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_EOR_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_EOR_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_EOR_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* ORI R%d, %d */
static avr_inst_t *avr_instr_ORI_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ORI_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_ORI_RD__D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 15) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_ORI_RD__D_x_x_d = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;

return inst;

}

/* OR R%d, R%d */
static avr_inst_t *avr_instr_OR_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_OR_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_OR_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_OR_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* ANDI R%d, R%d */
static avr_inst_t *avr_instr_ANDI_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ANDI_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ANDI_RD__RD_x_x_k = (((__EXTRACT(&mask0, code_inst) & 15) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_ANDI_RD__RD_x_x_d = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;

return inst;

}

/* AND R%d, R%d */
static avr_inst_t *avr_instr_AND_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_AND_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_AND_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_AND_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* SBIW R%d:R%d, %d */
static avr_inst_t *avr_instr_SBIW_RD_3ARD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XC00000}; /* 0000000011000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X300000}; /* 0000000000110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBIW_RD_3ARD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SBIW_RD_3ARD__D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 3) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_SBIW_RD_3ARD__D_x_x_d = __EXTRACT(&mask1, code_inst)
;

return inst;

}

/* SBCI R%d, %d */
static avr_inst_t *avr_instr_SBCI_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBCI_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SBCI_RD__D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 15) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_SBCI_RD__D_x_x_d = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;

return inst;

}

/* SBC R%d, R%d */
static avr_inst_t *avr_instr_SBC_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBC_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_SBC_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_SBC_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* SUBI R%d, %d */
static avr_inst_t *avr_instr_SUBI_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SUBI_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SUBI_RD__D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 15) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_SUBI_RD__D_x_x_d = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;

return inst;

}

/* SUB R%d, R%d */
static avr_inst_t *avr_instr_SUB_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SUB_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_SUB_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_SUB_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* ADIW R%d:R%d, %d */
static avr_inst_t *avr_instr_ADIW_RD_3ARD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XC00000}; /* 0000000011000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X300000}; /* 0000000000110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ADIW_RD_3ARD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_ADIW_RD_3ARD__D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 3) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_ADIW_RD_3ARD__D_x_x_d = __EXTRACT(&mask1, code_inst)
;

return inst;

}

/* ADC R%d, R%d */
static avr_inst_t *avr_instr_ADC_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ADC_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ADC_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_ADC_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* ADD R%d, R%d */
static avr_inst_t *avr_instr_ADD_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ADD_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ADD_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_ADD_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* CBI IO%d, %d */
static avr_inst_t *avr_instr_CBI_IOD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_CBI_IOD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_CBI_IOD__D_x_x_b = ((__EXTRACT(&mask2, code_inst) & 7) << 0)
;
	AVR_CBI_IOD__D_x_x_a = (((__EXTRACT(&mask0, code_inst) & 15) << 1) | ((__EXTRACT(&mask1, code_inst) & 1) << 0))
;

return inst;

}

/* SBI IO%d, %d */
static avr_inst_t *avr_instr_SBI_IOD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0X80000}; /* 0000000000001000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SBI_IOD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_SBI_IOD__D_x_x_b = ((__EXTRACT(&mask2, code_inst) & 7) << 0)
;
	AVR_SBI_IOD__D_x_x_a = (((__EXTRACT(&mask0, code_inst) & 15) << 1) | ((__EXTRACT(&mask1, code_inst) & 1) << 0))
;

return inst;

}

/* CLH */
static avr_inst_t *avr_instr_CLH_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLH;

return inst;
}

/* SEH */
static avr_inst_t *avr_instr_SEH_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SEH;

return inst;
}

/* CLT */
static avr_inst_t *avr_instr_CLT_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLT;

return inst;
}

/* SET */
static avr_inst_t *avr_instr_SET_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SET;

return inst;
}

/* CLV */
static avr_inst_t *avr_instr_CLV_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLV;

return inst;
}

/* SEV */
static avr_inst_t *avr_instr_SEV_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SEV;

return inst;
}

/* CLS */
static avr_inst_t *avr_instr_CLS_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLS;

return inst;
}

/* SES */
static avr_inst_t *avr_instr_SES_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SES;

return inst;
}

/* CLI */
static avr_inst_t *avr_instr_CLI_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLI;

return inst;
}

/* SEI */
static avr_inst_t *avr_instr_SEI_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SEI;

return inst;
}

/* CLZ */
static avr_inst_t *avr_instr_CLZ_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLZ;

return inst;
}

/* SEZ */
static avr_inst_t *avr_instr_SEZ_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SEZ;

return inst;
}

/* CLN */
static avr_inst_t *avr_instr_CLN_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLN;

return inst;
}

/* SEN */
static avr_inst_t *avr_instr_SEN_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SEN;

return inst;
}

/* CLC */
static avr_inst_t *avr_instr_CLC_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_CLC;

return inst;
}

/* SEC */
static avr_inst_t *avr_instr_SEC_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_SEC;

return inst;
}

/* BST R%d, %d */
static avr_inst_t *avr_instr_BST_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BST_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_BST_RD__D_x_x_b = ((__EXTRACT(&mask2, code_inst) & 7) << 0)
;
	AVR_BST_RD__D_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* BLD R%d, %d */
static avr_inst_t *avr_instr_BLD_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_BLD_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_BLD_RD__D_x_x_b = ((__EXTRACT(&mask2, code_inst) & 7) << 0)
;
	AVR_BLD_RD__D_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* SWAP R%d */
static avr_inst_t *avr_instr_SWAP_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_SWAP_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_SWAP_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* ASR R%d */
static avr_inst_t *avr_instr_ASR_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ASR_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ASR_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* ROR R%d */
static avr_inst_t *avr_instr_ROR_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ROR_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ROR_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LSR R%d */
static avr_inst_t *avr_instr_LSR_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LSR_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_LSR_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LPM R%d, Z+ */
static avr_inst_t *avr_instr_LPM_RD__Z_P__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LPM_RD__Z_P_;

	/* put other parameters */
	/* complex decoding */
	AVR_LPM_RD__Z_P__x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LPM R%d, Z */
static avr_inst_t *avr_instr_LPM_RD__Z_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LPM_RD__Z;

	/* put other parameters */
	/* complex decoding */
	AVR_LPM_RD__Z_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LPM */
static avr_inst_t *avr_instr_LPM_decode(mask_t *code_inst) {

avr_inst_t *inst = malloc(sizeof(avr_inst_t));
	
	
	inst->ident = AVR_LPM;

return inst;
}

/* LAC Z, R%d */
static avr_inst_t *avr_instr_LAC_Z__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LAC_Z__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_LAC_Z__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LAT Z, R%d */
static avr_inst_t *avr_instr_LAT_Z__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LAT_Z__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_LAT_Z__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LAS Z, R%d */
static avr_inst_t *avr_instr_LAS_Z__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LAS_Z__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_LAS_Z__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* XCH Z, R%d */
static avr_inst_t *avr_instr_XCH_Z__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_XCH_Z__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_XCH_Z__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* POP R%d */
static avr_inst_t *avr_instr_POP_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_POP_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_POP_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* PUSH R%d */
static avr_inst_t *avr_instr_PUSH_RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_PUSH_RD;

	/* put other parameters */
	/* complex decoding */
	AVR_PUSH_RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* OUT %d, R%d */
static avr_inst_t *avr_instr_OUT_D__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X6000000}; /* 0000011000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_OUT_D__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_OUT_D__RD_x_x_a = (((__EXTRACT(&mask0, code_inst) & 3) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_OUT_D__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* IN R%d, %d */
static avr_inst_t *avr_instr_IN_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X6000000}; /* 0000011000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_IN_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_IN_RD__D_x_x_a = (((__EXTRACT(&mask0, code_inst) & 3) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_IN_RD__D_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* ST Z+, R%d */
static avr_inst_t *avr_instr_ST_Z_P___RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST_Z_P___RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST_Z_P___RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* ST -Z, R%d */
static avr_inst_t *avr_instr_ST__M_Z__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST__M_Z__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST__M_Z__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* STD Z+%d, R%d */
static avr_inst_t *avr_instr_STD_Z_P_D__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X20000000}; /* 0010000000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XC000000}; /* 0000110000000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask3 = {tab_mask3, 16};
	static uint32_t tab_mask4[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask4 = {tab_mask4, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_STD_Z_P_D__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_STD_Z_P_D__RD_x_x_q = ((((__EXTRACT(&mask0, code_inst) & 1) << 5) | ((__EXTRACT(&mask1, code_inst) & 3) << 3)) | ((__EXTRACT(&mask4, code_inst) & 7) << 0))
;
	AVR_STD_Z_P_D__RD_x_x_d = (((__EXTRACT(&mask2, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;

return inst;

}

/* ST Y+, R%d */
static avr_inst_t *avr_instr_ST_Y_P___RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST_Y_P___RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST_Y_P___RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* ST -Y, R%d */
static avr_inst_t *avr_instr_ST__M_Y__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST__M_Y__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST__M_Y__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* STD Y+%d, R%d */
static avr_inst_t *avr_instr_STD_Y_P_D__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X20000000}; /* 0010000000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XC000000}; /* 0000110000000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask3 = {tab_mask3, 16};
	static uint32_t tab_mask4[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask4 = {tab_mask4, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_STD_Y_P_D__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_STD_Y_P_D__RD_x_x_q = ((((__EXTRACT(&mask0, code_inst) & 1) << 5) | ((__EXTRACT(&mask1, code_inst) & 3) << 3)) | ((__EXTRACT(&mask4, code_inst) & 7) << 0))
;
	AVR_STD_Y_P_D__RD_x_x_d = (((__EXTRACT(&mask2, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;

return inst;

}

/* ST X+, R%d */
static avr_inst_t *avr_instr_ST_X_P___RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST_X_P___RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST_X_P___RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* ST -X, R%d */
static avr_inst_t *avr_instr_ST__M_X__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST__M_X__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST__M_X__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* ST X, R%d */
static avr_inst_t *avr_instr_ST_X__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_ST_X__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_ST_X__RD_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LDD R%d, Z+%d */
static avr_inst_t *avr_instr_LDD_RD__Z_P_D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X20000000}; /* 0010000000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XC000000}; /* 0000110000000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask3 = {tab_mask3, 16};
	static uint32_t tab_mask4[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask4 = {tab_mask4, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LDD_RD__Z_P_D;

	/* put other parameters */
	/* complex decoding */
	AVR_LDD_RD__Z_P_D_x_x_q = ((((__EXTRACT(&mask0, code_inst) & 1) << 5) | ((__EXTRACT(&mask1, code_inst) & 3) << 3)) | ((__EXTRACT(&mask4, code_inst) & 7) << 0))
;
	AVR_LDD_RD__Z_P_D_x_x_d = (((__EXTRACT(&mask2, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, -Z */
static avr_inst_t *avr_instr_LD_RD___M_Z_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD___M_Z;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD___M_Z_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, Z+ */
static avr_inst_t *avr_instr_LD_RD__Z_P__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD__Z_P_;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD__Z_P__x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LDD R%d, Y+%d */
static avr_inst_t *avr_instr_LDD_RD__Y_P_D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X20000000}; /* 0010000000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XC000000}; /* 0000110000000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask3 = {tab_mask3, 16};
	static uint32_t tab_mask4[1] = { 0X70000}; /* 0000000000000111 */
	static mask_t mask4 = {tab_mask4, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LDD_RD__Y_P_D;

	/* put other parameters */
	/* complex decoding */
	AVR_LDD_RD__Y_P_D_x_x_q = ((((__EXTRACT(&mask0, code_inst) & 1) << 5) | ((__EXTRACT(&mask1, code_inst) & 3) << 3)) | ((__EXTRACT(&mask4, code_inst) & 7) << 0))
;
	AVR_LDD_RD__Y_P_D_x_x_d = (((__EXTRACT(&mask2, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, -Y */
static avr_inst_t *avr_instr_LD_RD___M_Y_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD___M_Y;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD___M_Y_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, Y+ */
static avr_inst_t *avr_instr_LD_RD__Y_P__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD__Y_P_;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD__Y_P__x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, -X */
static avr_inst_t *avr_instr_LD_RD___M_X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD___M_X;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD___M_X_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, X+ */
static avr_inst_t *avr_instr_LD_RD__X_P__decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD__X_P_;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD__X_P__x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* LD R%d, X */
static avr_inst_t *avr_instr_LD_RD__X_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LD_RD__X;

	/* put other parameters */
	/* complex decoding */
	AVR_LD_RD__X_x_x_d = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask1, code_inst) & 15) << 0))
;

return inst;

}

/* MOVW R%d:%d, R%d:%d */
static avr_inst_t *avr_instr_MOVW_RD_3AD__RD_3AD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask1 = {tab_mask1, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_MOVW_RD_3AD__RD_3AD;

	/* put other parameters */
	/* complex decoding */
	AVR_MOVW_RD_3AD__RD_3AD_x_x_r = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;
	AVR_MOVW_RD_3AD__RD_3AD_x_x_d = ((__EXTRACT(&mask0, code_inst) & 15) << 0)
;

return inst;

}

/* MOV R%d, R%d */
static avr_inst_t *avr_instr_MOV_RD__RD_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0X2000000}; /* 0000001000000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0X1000000}; /* 0000000100000000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask2 = {tab_mask2, 16};
	static uint32_t tab_mask3[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask3 = {tab_mask3, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_MOV_RD__RD;

	/* put other parameters */
	/* complex decoding */
	AVR_MOV_RD__RD_x_x_r = (((__EXTRACT(&mask0, code_inst) & 1) << 4) | ((__EXTRACT(&mask3, code_inst) & 15) << 0))
;
	AVR_MOV_RD__RD_x_x_d = (((__EXTRACT(&mask1, code_inst) & 1) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;

return inst;

}

/* LDI R%d, %d */
static avr_inst_t *avr_instr_LDI_RD__D_decode(mask_t *code_inst) {

	/* complex decoding */
	static uint32_t tab_mask0[1] = {0XF000000}; /* 0000111100000000 */
	static mask_t mask0 = {tab_mask0, 16};
	static uint32_t tab_mask1[1] = {0XF00000}; /* 0000000011110000 */
	static mask_t mask1 = {tab_mask1, 16};
	static uint32_t tab_mask2[1] = { 0XF0000}; /* 0000000000001111 */
	static mask_t mask2 = {tab_mask2, 16};
	
	avr_inst_t *inst = (avr_inst_t *)malloc(sizeof(avr_inst_t));
	inst->ident = AVR_LDI_RD__D;

	/* put other parameters */
	/* complex decoding */
	AVR_LDI_RD__D_x_x_k = (((__EXTRACT(&mask0, code_inst) & 15) << 4) | ((__EXTRACT(&mask2, code_inst) & 15) << 0))
;
	AVR_LDI_RD__D_x_x_d = ((__EXTRACT(&mask1, code_inst) & 15) << 0)
;

return inst;

}




typedef avr_inst_t *avr_decode_function_t(mask_t *code_inst);

static avr_decode_function_t *avr_decode_table[] =
{
	avr_instr_UNKNOWN_decode,
	avr_instr_CALL_D__LP_04X_RP__decode,
	avr_instr_JMP_D__LP_04X_RP__decode,
	avr_instr_STS_D__RD_decode,
	avr_instr_LDS_RD__0X04X_decode,
	avr_instr_BRID___P_D__3B__P_04X_decode,
	avr_instr_BRIE___P_D__3B__P_04X_decode,
	avr_instr_BRVC___P_D__3B__P_04X_decode,
	avr_instr_BRVS___P_D__3B__P_04X_decode,
	avr_instr_BRTC___P_D__3B__P_04X_decode,
	avr_instr_BRTS___P_D__3B__P_04X_decode,
	avr_instr_BRHC___P_D__3B__P_04X_decode,
	avr_instr_BRHS___P_D__3B__P_04X_decode,
	avr_instr_BRLT___P_D__3B__P_04X_decode,
	avr_instr_BRGE___P_D__3B__P_04X_decode,
	avr_instr_BRPL___P_D__3B__P_04X_decode,
	avr_instr_BRMI___P_D__3B__P_04X_decode,
	avr_instr_BRCC___P_D__3B__P_04X_decode,
	avr_instr_BRCS___P_D__3B__P_04X_decode,
	avr_instr_BRNE___P_D__3B__P_04X_decode,
	avr_instr_BREQ___P_D__3B__P_04X_decode,
	avr_instr_SBIC_IOD__D_decode,
	avr_instr_SBIC_IOD__D_0_decode,
	avr_instr_SBRS_RD__D_decode,
	avr_instr_SBRC_RD__D_decode,
	avr_instr_CPI_RD__0X02X__3B_D_decode,
	avr_instr_CPC_RD__RD_decode,
	avr_instr_CP_RD__RD_decode,
	avr_instr_CSPE_RD__RD_decode,
	avr_instr_RETI_decode,
	avr_instr_RET_decode,
	avr_instr_ICALL_decode,
	avr_instr_RCALL_D__LP_04X_RP__decode,
	avr_instr_IJMP_decode,
	avr_instr_RJMP___P_D__3B_04X_decode,
	avr_instr_FMULSU_RD__RD_decode,
	avr_instr_FMULS_RD__RD_decode,
	avr_instr_FMUL_RD__RD_decode,
	avr_instr_MULSU_RD__RD_decode,
	avr_instr_MULS_RD__RD_decode,
	avr_instr_MUL_RD__RD_decode,
	avr_instr_DEC_RD_decode,
	avr_instr_INC_RD_decode,
	avr_instr_NEG_RD_decode,
	avr_instr_COM_RD_decode,
	avr_instr_EOR_RD__RD_decode,
	avr_instr_ORI_RD__D_decode,
	avr_instr_OR_RD__RD_decode,
	avr_instr_ANDI_RD__RD_decode,
	avr_instr_AND_RD__RD_decode,
	avr_instr_SBIW_RD_3ARD__D_decode,
	avr_instr_SBCI_RD__D_decode,
	avr_instr_SBC_RD__RD_decode,
	avr_instr_SUBI_RD__D_decode,
	avr_instr_SUB_RD__RD_decode,
	avr_instr_ADIW_RD_3ARD__D_decode,
	avr_instr_ADC_RD__RD_decode,
	avr_instr_ADD_RD__RD_decode,
	avr_instr_CBI_IOD__D_decode,
	avr_instr_SBI_IOD__D_decode,
	avr_instr_CLH_decode,
	avr_instr_SEH_decode,
	avr_instr_CLT_decode,
	avr_instr_SET_decode,
	avr_instr_CLV_decode,
	avr_instr_SEV_decode,
	avr_instr_CLS_decode,
	avr_instr_SES_decode,
	avr_instr_CLI_decode,
	avr_instr_SEI_decode,
	avr_instr_CLZ_decode,
	avr_instr_SEZ_decode,
	avr_instr_CLN_decode,
	avr_instr_SEN_decode,
	avr_instr_CLC_decode,
	avr_instr_SEC_decode,
	avr_instr_BST_RD__D_decode,
	avr_instr_BLD_RD__D_decode,
	avr_instr_SWAP_RD_decode,
	avr_instr_ASR_RD_decode,
	avr_instr_ROR_RD_decode,
	avr_instr_LSR_RD_decode,
	avr_instr_LPM_RD__Z_P__decode,
	avr_instr_LPM_RD__Z_decode,
	avr_instr_LPM_decode,
	avr_instr_LAC_Z__RD_decode,
	avr_instr_LAT_Z__RD_decode,
	avr_instr_LAS_Z__RD_decode,
	avr_instr_XCH_Z__RD_decode,
	avr_instr_POP_RD_decode,
	avr_instr_PUSH_RD_decode,
	avr_instr_OUT_D__RD_decode,
	avr_instr_IN_RD__D_decode,
	avr_instr_ST_Z_P___RD_decode,
	avr_instr_ST__M_Z__RD_decode,
	avr_instr_STD_Z_P_D__RD_decode,
	avr_instr_ST_Y_P___RD_decode,
	avr_instr_ST__M_Y__RD_decode,
	avr_instr_STD_Y_P_D__RD_decode,
	avr_instr_ST_X_P___RD_decode,
	avr_instr_ST__M_X__RD_decode,
	avr_instr_ST_X__RD_decode,
	avr_instr_LDD_RD__Z_P_D_decode,
	avr_instr_LD_RD___M_Z_decode,
	avr_instr_LD_RD__Z_P__decode,
	avr_instr_LDD_RD__Y_P_D_decode,
	avr_instr_LD_RD___M_Y_decode,
	avr_instr_LD_RD__Y_P__decode,
	avr_instr_LD_RD___M_X_decode,
	avr_instr_LD_RD__X_P__decode,
	avr_instr_LD_RD__X_decode,
	avr_instr_MOVW_RD_3AD__RD_3AD_decode,
	avr_instr_MOV_RD__RD_decode,
	avr_instr_LDI_RD__D_decode
};

/* free a dynamically allocated instruction, we try not to free an already freed or NULL pointer */
void avr_free_inst(avr_inst_t *inst) {
	assert(inst);
	// NB : inst->instrinput is allocate with the same malloc which allocate an instr

    /* finally free it */
	free(inst);
}

#if defined(__cplusplus)
}
#endif

#endif /* GLISS_AVR_INCLUDE_AVR_DECODE_TABLE_H */
