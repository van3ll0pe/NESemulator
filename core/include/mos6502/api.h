/* Generated by gep (125/05/23 10:52:00) copyright (c) 2008 IRIT - UPS */
#ifndef GLISS_MOS6502_INCLUDE_MOS6502_API_H
#define GLISS_MOS6502_INCLUDE_MOS6502_API_H

#include <stdint.h>
#include <stdio.h>

#if defined(__WIN32) || defined(__WIN64)
#	ifdef __cplusplus
#		define __BEGIN_DECLS	extern "C" {
#		define __END_DECLS		}
#	else
#		define __BEGIN_DECLS
#		define __END_DECLS
#	endif
#else
#	include <sys/cdefs.h>
#endif

#include "id.h"
#include "mem.h"
#include "decode.h"

__BEGIN_DECLS

#define MOS6502_PROC_NAME "MOS6502"
#define MOS6502_PC_NAME  PC

/* return an instruction identifier as a string instead of the mos6502_ident_t which is not very user friendly */
char *mos6502_get_string_ident(mos6502_ident_t id);

/* opaque types */
typedef struct mos6502_platform_t mos6502_platform_t;
typedef struct mos6502_fetch_t mos6502_fetch_t;
typedef struct mos6502_decoder_t mos6502_decoder_t;
struct mos6502_loader_t;
typedef struct mask_t mask_t;

/* mos6502_state_t type */
typedef struct mos6502_state_t {
	mos6502_platform_t *platform;
	uint8_t Y;
	uint32_t total_cycle;
	uint8_t SR;
	uint8_t is_jam;
	uint8_t A;
	uint8_t SP;
	uint32_t cycle;
	uint8_t X;
	uint16_t PC;

	mos6502_memory_t *ram;
	mos6502_memory_t *ppuram;
	mos6502_memory_t *apuram;
	mos6502_memory_t *cartridge;

} mos6502_state_t;

/* mos6502_sim_t type */
typedef struct mos6502_sim_t {
	mos6502_state_t *state;
	mos6502_decoder_t *decoder;
	/* on libc stripped programs it is difficult to find the exit point, so we specify it */
	mos6502_address_t addr_exit;
	/* anything else? */
	int ended;
} mos6502_sim_t;


/* mos6502_value_t type */
typedef union mos6502_value_t {
	uint8_t uint8;

} mos6502_value_t;


/* mos6502_ii_t type */
typedef struct mos6502_ii_t {
	mos6502_value_t val;
} mos6502_ii_t;

/* mos6502_inst_t type */
typedef struct mos6502_inst_t {
	mos6502_ident_t   ident;
	mos6502_address_t addr;
	mos6502_ii_t instrinput[2];

} mos6502_inst_t;

/* auxiliary vector */
typedef struct mos6502_auxv_t {
	int	a_type;
	union {
		long a_val;
		void *a_ptr;
		void (*a_fcn)();
	} a_un;
} mos6502_auxv_t;

/* environment description */
typedef struct mos6502_env_t
{
	int argc;

	char **argv;
	mos6502_address_t argv_addr;

	char **envp;
	mos6502_address_t envp_addr;

	mos6502_auxv_t *auxv;
	mos6502_address_t auxv_addr;

	mos6502_address_t stack_pointer;
	mos6502_address_t brk_addr;
} mos6502_env_t;

/* platform management */
#define MOS6502_MAIN_MEMORY		0
mos6502_platform_t *mos6502_new_platform(void);
mos6502_memory_t *mos6502_get_memory(mos6502_platform_t *platform, int index);
struct mos6502_env_t;
struct mos6502_env_t *mos6502_get_sys_env(mos6502_platform_t *platform);
void mos6502_lock_platform(mos6502_platform_t *platform);
void mos6502_unlock_platform(mos6502_platform_t *platform);
int mos6502_load_platform(mos6502_platform_t *platform, const char *path);
void mos6502_load(mos6502_platform_t *platform, struct mos6502_loader_t *loader);

/* fetching */
mos6502_fetch_t *mos6502_new_fetch(mos6502_platform_t *pf);
void mos6502_delete_fetch(mos6502_fetch_t *fetch);


mos6502_ident_t mos6502_fetch(mos6502_fetch_t *fetch, mos6502_address_t address, mask_t *code);

/* decoding */
typedef struct mos6502_mode_t {
	const char *name;
	mos6502_inst_t *(*decode)(mos6502_decoder_t *decoder, mos6502_address_t address);
} mos6502_mode_t;
extern mos6502_mode_t mos6502_modes[];

mos6502_decoder_t *mos6502_new_decoder(mos6502_platform_t *pf);
void mos6502_delete_decoder(mos6502_decoder_t *decoder);
mos6502_inst_t *mos6502_decode(mos6502_decoder_t *decoder, mos6502_address_t address);
void mos6502_free_inst(mos6502_inst_t *inst);
void mos6502_set_cond_state(mos6502_decoder_t *decoder, mos6502_state_t *state);
unsigned long mos6502_get_inst_size(mos6502_inst_t* inst);
unsigned long mos6502_get_inst_size_from_id(mos6502_ident_t id);


/* code execution */
void mos6502_execute(mos6502_state_t *state, mos6502_inst_t *inst);

/* state management function */
mos6502_state_t *mos6502_new_state(mos6502_platform_t *platform);
void mos6502_delete_state(mos6502_state_t *state);
mos6502_state_t *mos6502_copy_state(mos6502_state_t *state);
mos6502_state_t *mos6502_fork_state(mos6502_state_t *state);
void mos6502_dump_state(mos6502_state_t *state, FILE *out);
void mos6502_output_header_valid(FILE *out);
void mos6502_output_state_valid(mos6502_state_t *state, FILE *out);
mos6502_platform_t *mos6502_platform(mos6502_state_t *state);

/* simulation functions */
mos6502_sim_t *mos6502_new_sim(mos6502_state_t *state, mos6502_address_t start_addr, mos6502_address_t exit_addr);
mos6502_inst_t *mos6502_next_inst(mos6502_sim_t *sim);
uint64_t mos6502_run_and_count_inst(mos6502_sim_t *sim);
void mos6502_run_sim(mos6502_sim_t *sim);
void mos6502_step(mos6502_sim_t *sim);
void mos6502_delete_sim(mos6502_sim_t *sim);
mos6502_address_t  mos6502_next_addr(mos6502_sim_t *sim);
void mos6502_set_next_address(mos6502_sim_t *sim, mos6502_address_t address);
#define mos6502_set_entry_address(sim, addr) mos6502_set_next_address(sim, addr)
void mos6502_set_exit_address(mos6502_sim_t *sim, mos6502_address_t address);
#define mos6502_set_sim_ended(sim) (sim)->ended = 1
#define mos6502_is_sim_ended(sim) ((sim)->ended)

/* disassemble function */
void mos6502_disasm(char *buffer, mos6502_inst_t *inst);
typedef char *(*mos6502_label_solver_t)(mos6502_address_t address);
extern mos6502_label_solver_t mos6502_solve_label;
char *mos6502_solve_label_null(mos6502_address_t address);

/* variable length functions */
uint32_t value_on_mask(mask_t *inst, mask_t *mask);

/* assertion management */
void mos6502_assert(mos6502_state_t *state, int c, const char *file, int line);
extern int mos6502_assert_enable;

__END_DECLS

#endif /* GLISS_MOS6502_INCLUDE_MOS6502_API_H */
