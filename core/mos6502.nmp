// identification
let NAME = "mos6502"
let VERSION = "1.0"
let ARCH = "mos6502"
let BUILDER = "atmel"
let LICENSE = "GPL"
let COPYRIGHT = "University of Toulouse"
let YEAR = "2025"


include "addressing_mode.nmp"
include "flag.nmp"
include "config.nmp"

include "stack_instructions.nmp"
include "transfer_instructions.nmp"
include "flag_instructions.nmp"
include "logical_instructions.nmp"
include "increment_decrement_instructions.nmp"
include "arithmetic_instructions.nmp"
include "compare_instructions.nmp"
include "shift_rotate_instructions.nmp"
include "branch_instructions.nmp"
include "jump_instructions.nmp"
include "other_instructions.nmp"
include "illegal_instructions.nmp"

//start mos6502
op init()
	action = {
		PC = 0xFFFC;
        SP = 0xFF;
        A = 0;
        X = 0;
        Y = 0;
        SR = 0b00100100;
        cycle = 0;
        total_cycle = 0;
        is_jam = 0;
	}

op instruction(x: all)
    syntax  = x.syntax
    image   = x.image
    action  = {
                    if is_jam == 0 then
                        PC = PC + 1;
                        x.action;
                    endif;
                    total_cycle = total_cycle + cycle;
            }

op all =
LDA | LDX | LDY | STA | STX | STY | TAX | TAY | TSX | TXA | TXS | TYA |
PHA | PLA | PHP | PLP |
CLC | CLD | CLI | CLV | SED | SEC | SEI |
AND | ORA | EOR |
INX | DEX | INY | DEY | INC | DEC |
ADC | SBC |
CMP | CPX | CPY |
ASL | LSR | ROL | ROR |
BCC | BCS | BEQ | BMI | BNE | BPL | BVC | BVS |
JMP | JSR | RTS |
BIT | NOP |
ALR | ANC | ANC2| ARR | SBX | LAX | SAX | SHX | SHY | SHA | DCP | ISC | SRE | RRA | RLA | SLO |
USBC| NOP_ILLEGAL | SKB | IGN | JAM
//list of instruction
