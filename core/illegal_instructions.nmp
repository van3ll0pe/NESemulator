op ALR(value : card(8))
    syntax = format("ALR #%2x", value)
    image = format("%8b %8b", 0x4B, value)
    action = {
            IMMEDIATE();
            A = A & value;

            SR_C = A<0..0>;
            A = A >> 1;

            update_N(A);
            update_Z(A);

            cycle = cycle + 2;
    }

op ANC(value : card(8))
        syntax = format("ANC #%2x", value)
        image = format("%8b %8b", 0x0B, value)
        action = {
                IMMEDIATE();

                A = A & value;
                SR_C = A<7..7>;

                update_N(A);
                update_Z(A);

                cycle = cycle + 2;
        }

op ANC2(value : card(8))
        syntax = format("ANC2 #%2x", value)
        image = format("%8b %8b", 0x2B, value)
        action = {
                IMMEDIATE();

                A = A & value;
                SR_C = A<7..7>;

                update_N(A);
                update_Z(A);

                cycle = cycle + 2;
        }


op ARR(value : card(8))
        syntax = format("ARR #%2x", value)
        image = format("%8b %8b", 0x6B, value)
        action = {
                IMMEDIATE();

                A = A & value;
                A = (A >> 1);
                A<7..7> = SR_C;
                SR_C = A<6..6>;
                update_N(A);
                update_Z(A);
                SR_V = A<6..6> ^ A<5..5>;

                cycle = cycle + 2;
        }

op SBX(value : card(8))
        syntax = format("SBX #%2x", value)
        image = format("%8b %8b", 0xCB, value)
        action = {
                let res: card(16) = (A & X) - value;
                X = res<7..0>;
                update_N(X);
                update_Z(X);
                update_C(res);

                cycle = cycle + 2;
        }

//---------------------------------------------------------------------------------------

op LAX = LAX_ZPG | LAX_ZPG_Y | LAX_ABS | LAX_ABS_Y | LAX_PRE_IND | LAX_POST_IND

op LAX_ZPG(lo_address : card(8))
        syntax = format("LAX $%2x", lo_address)
        image = format("%8b %8b", 0xA7, lo_address)
        action = {
                let address: card(16) = 0;
                ZPG(address, lo_address);
                load(address, A);
                X = A;

                update_N(A);
                update_Z(A);
                
                cycle = cycle + 3;
        }

op LAX_ZPG_Y(lo_address: card(8))
        syntax = format("LAX $%2x, Y", lo_address)
        image = format("%8b %8b", 0xB7, lo_address)
        action = {
                let address: card(16) = 0;
                ZPG_Y(address, lo_address);

                load(address, A);
                X = A;

                update_N(A);
                update_Z(A);

                cycle = cycle + 4;
        }

op LAX_ABS(lo_address : card(8), hi_address : card(8))
        syntax = format("LAX $%2x%2x", hi_address, lo_address)
        image = format("%8b %8b %8b", 0xAF, lo_address, hi_address)
        action = {
                let address: card(16) = 0;
                ABS(address, lo_address, hi_address);
                load(address, A);
                X = A;

                update_N(A);
                update_Z(A);

                cycle = cycle + 4;
        }

op LAX_ABS_Y(lo_address : card(8), hi_address : card(8))
        syntax = format("LAX $%2x%2x, Y", hi_address, lo_address)
        image = format("%8b %8b %8b", 0xBF, lo_address, hi_address)
        action = {
                let address: card(16) = 0;
                ABS_Y(address, lo_address, hi_address);
                load(address, A);
                X = A;

                update_N(A);
                update_Z(A);

                cycle = cycle + 4;
        }

op LAX_PRE_IND(lo_address : card(8))
        syntax = format("LAX ($%2x, X)", lo_address)
        image = format("%8b %8b", 0xA3, lo_address)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, lo_address);

                load(address, A);
                X = A;

                update_N(A);
                update_Z(A);

                cycle = cycle + 6;
        }

op LAX_POST_IND(lo_address : card(8))
        syntax = format("LAX ($%2x), Y", lo_address)
        image = format("%8b %8b", 0xB3, lo_address)
        action = {
                let address: card(16) = 0;
                POST_IND(address, lo_address);

                load(address, A);
                X = A;

                update_N(A);
                update_Z(A);

                cycle = cycle + 5;
        }

//-----------------------------------------------------------------

op SAX = SAX_ZEROPAGE | SAX_ZEROPAGE_Y | SAX_ABSOLUTE | SAX_PRE_INDIRECT

op SAX_ZEROPAGE(address_lo : card(8))
        syntax = format("SAX $%2x", address_lo)
        image = format("%8b %8b", 0x87, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG(address, address_lo);
                let res: card(8) = A & X;

                store(address, res);
                cycle = 3;
        }

op SAX_ZEROPAGE_Y(address_lo : card(8))
        syntax = format("SAX $%2x, Y", address_lo)
        image = format("%8b %8b", 0x97, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG_Y(address, address_lo);
                let res: card(8) = A & X;

                store(address, res);
                cycle = 4;
        }

op SAX_ABSOLUTE(address_lo: card(8), address_hi : card(8))
        syntax = format("SAX $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x8F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let res: card(8) = A & X;

                store(address, res);
                cycle = 4;
        }

op SAX_PRE_INDIRECT(address_lo : card(8))
        syntax = format("SAX ($%2x, X)", address_lo)
        image = format("%8b %8b", 0x83, address_lo)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, address_lo);
                let res: card(8) = A & X;

                store(address, res);
                cycle = 6;
        }

//----------------------------------------------------------------------------------

op SHX(address_lo : card(8), address_hi : card(8))
        syntax = format("SHX $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x9E, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let high_byte: card(8) = ((address + 1) & 0xFF00) >> 8;
                let res: card(8) = X & high_byte;

                store(address, res);
                cycle = 5;
        }

op SHY(address_lo : card(8), address_hi : card(8))
        syntax = format("SHY $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x9C, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let high_byte: card(8) = ((address + 1) & 0xFF00) >> 8;
                let res: card(8) = Y & high_byte;

                store(address, res);
                cycle = 5;
        }

//-----------------------------------------------------------

op SHA = SHA_ABSOLUTE | SHA_POST_INDIRECT

op SHA_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("SHA $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x9F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let high_byte: card(8) = ((address + 1) & 0xFF00) >> 8;
                let res: card(8) = A & X & high_byte;

                store(address, res);
                cycle = 5;
        }

op SHA_POST_INDIRECT(address_lo : card(8))
        syntax = format("SHA ($%2x), Y", address_lo)
        image = format("%8b %8b", 0x93, address_lo)
        action = {
                let address: card(16) = 0;
                POST_IND(address, address_lo);
                let high_byte: card(8) = ((address + 1) & 0xFF00) >> 8;
                let res: card(8) = A & X & high_byte;

                store(address, res);
                cycle = 6;
        }

//-----------------------------------------------------------------

op DCP = DCP_ZEROPAGE | DCP_ZEROPAGE_X | DCP_ABSOLUTE | DCP_ABSOLUTE_X | DCP_ABSOLUTE_Y | DCP_PRE_INDIRECT | DCP_POST_INDIRECT

op DCP_ZEROPAGE(address_lo : card(8))
        syntax = format("DCP $%2x", address_lo)
        image = format("%8b %8b", 0xC7, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 5;
        }

op DCP_ZEROPAGE_X(address_lo : card(8))
        syntax = format("DCP $%2x, X", address_lo)
        image = format("%8b %8b", 0xD7, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG_X(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 6;
        }

op DCP_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("DCP $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xCF, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 6;
        }

op DCP_ABSOLUTE_X(address_lo : card(8), address_hi : card(8))
        syntax = format("DCP $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xDF, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 7;
        }

op DCP_ABSOLUTE_Y(address_lo : card(8), address_hi : card(8))
        syntax = format("DCP $%2x%2x, Y", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xDB, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_Y(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 7;
        }

op DCP_PRE_INDIRECT(address_lo : card(8))
        syntax = format("DCP ($%2x, X)", address_lo)
        image = format("%8b %8b", 0xC3, address_lo)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 8;
        }

op DCP_POST_INDIRECT(address_lo : card(8))
        syntax = format("DCP ($%2x), Y", address_lo)
        image = format("%8b %8b", 0xD3, address_lo)
        action = {
                let address: card(16) = 0;
                POST_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value - 1;
                store(address, value);

                let res: card(16) = A - value;

                update_N(res<7..0>);
                update_Z(res<7..0>);
                update_C(res);

                cycle = 8;
        }

//-------------------------------------------------------------------------

op ISC = ISC_ZEROPAGE | ISC_ZEROPAGE_X | ISC_ABSOLUTE | ISC_ABSOLUTE_X | ISC_ABSOLUTE_Y | ISC_PRE_IND | ISC_POST_IND

op ISC_ZEROPAGE(address_lo : card(8))
        syntax = format("ISC $%2x", address_lo)
        image = format("%8b %8b", 0xE7, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
                
                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 5;
        }

op ISC_ZEROPAGE_X(address_lo : card(8))
        syntax = format("ISC $%2x, X", address_lo)
        image = format("%8b %8b",0xF7, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG_X(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
               

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 6;
        }

op ISC_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("ISC $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xEF, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
               

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 6;
        }

op ISC_ABSOLUTE_X(address_lo : card(8), address_hi : card(8))
        syntax = format("ISC $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xFF, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
               

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 7;
        }

op ISC_ABSOLUTE_Y(address_lo : card(8), address_hi : card(8))
        syntax = format("ISC $%2x%2x, Y", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xFB, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_Y(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
               

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 7;
        }

op ISC_PRE_IND(address_lo : card(8))
        syntax = format("ISC ($%2x, X)", address_lo)
        image = format("%8b %8b", 0xE3, address_lo)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
               

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 8;
        }

op ISC_POST_IND(address_lo : card(8))
        syntax = format("ISC ($%2x), Y", address_lo)
        image = format("%8b %8b", 0xF3, address_lo)
        action = {
                let address: card(16) = 0;
                POST_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                value = value + 1;
                store(address, value);

                value = ~value;
                let res: card(16) = A + value + SR_C;
               

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;

                cycle = 8;
        }


//------------------------------------------------------------------

op SRE = SRE_ZEROPAGE | SRE_ZEROPAGE_X | SRE_ABSOLUTE | SRE_ABSOLUTE_X | SRE_ABSOLUTE_Y | SRE_PRE_IND | SRE_POST_IND

op SRE_ZEROPAGE(address_lo : card(8))
        syntax = format("SRE $%2x", address_lo)
        image = format("%8b %8b", 0x47, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 5;
        }

op SRE_ZEROPAGE_X(address_lo : card(8))
        syntax = format("SRE $%2x, X", address_lo)
        image = format("%8b %8b", 0x57, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG_X(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 6;
        }

op SRE_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("SRE $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x4F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 6;
        }

op SRE_ABSOLUTE_X(address_lo : card(8), address_hi : card(8))
        syntax = format("SRE $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x5F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 7;
        }

op SRE_ABSOLUTE_Y(address_lo : card(8), address_hi : card(8))
        syntax = format("SRE $%2x%2x, Y", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x5B, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 7;
        }

op SRE_PRE_IND(address_lo : card(8))
        syntax = format("SRE ($%2x, X)", address_lo)
        image = format("%8b %8b", 0x43, address_lo)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 8;
        }

op SRE_POST_IND(address_lo : card(8))
        syntax = format("SRE ($%2x), Y", address_lo)
        image = format("%8b %8b", 0x53, address_lo)
        action = {
                let address: card(16) = 0;
                POST_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                SR_C = value<0..0>;
                value = value >> 1;

                store(address, value);
                A = A ^ value;

                update_N(A);
                update_Z(A);

                cycle = 8;
        }

//-----------------------------------------------------------

op RRA = RRA_ZEROPAGE | RRA_ZEROPAGE_X | RRA_ABSOLUTE | RRA_ABSOLUTE_X | RRA_ABSOLUTE_Y | RRA_PRE_INDIRECT | RRA_POST_INDIRECT

op RRA_ZEROPAGE(address_lo : card(8))
        syntax = format("RRA $%2x", address_lo)
        image = format("%8b %8b", 0x67, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);


                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 5;
        }

op RRA_ZEROPAGE_X(address_lo : card(8))
        syntax = format("RRA $%2x, X", address_lo)
        image = format("%8b %8b", 0x77, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG_X(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);
                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 6;
        }

op RRA_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("RRA $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x6F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);
                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 6;
        }

op RRA_ABSOLUTE_X(address_lo : card(8), address_hi : card(8))
        syntax = format("RRA $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x7F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);
                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 7;
        }

op RRA_ABSOLUTE_Y(address_lo : card(8), address_hi : card(8))
        syntax = format("RRA $%2x%2x, Y", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x7B, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_Y(address, address_lo, address_hi);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);
                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 7;
        }

op RRA_PRE_INDIRECT(address_lo : card(8))
        syntax = format("RRA ($%2x,X)", address_lo)
        image = format("%8b %8b", 0x63, address_lo)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);
                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 8;
        }

op RRA_POST_INDIRECT(address_lo : card(8))
        syntax = format("RRA ($%2x),Y", address_lo)
        image = format("%8b %8b", 0x73, address_lo)
        action = {
                let address: card(16) = 0;
                POST_IND(address, address_lo);
                let value: card(8) = 0;
                load(address, value);

                let carry : card(1) = value<0..0>;
                value = value >> 1;
                value<7..7> = SR_C;
                SR_C = carry;
                store(address, value);
                let res: card(16) = A + value + SR_C;

                update_C(res);
                update_N(res);
                update_Z(res<7..0>);
                update_V(value, A, res);

                A = res<7..0>;
                cycle = 8;
        }

//------------------------------------------------------------------------------------

op RLA = RLA_ZEROPAGE | RLA_ZEROPAGE_X | RLA_ABSOLUTE | RLA_ABSOLUTE_X | RLA_ABSOLUTE_Y | RLA_PRE_INDIRECT | RLA_POST_INDIRECT

op RLA_ZEROPAGE(address_lo : card(8))
        syntax = format("RLA $%2x", address_lo)
        image = format("%8b %8b", 0x27, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 5;
        }

op RLA_ZEROPAGE_X(address_lo : card(8))
        syntax = format("RLA $%2x, X", address_lo)
        image = format("%8b %8b", 0x37, address_lo)
        action = {
                let address: card(16) = 0;
                ZPG_X(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 6;
        }

op RLA_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("RLA $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x2F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS(address, address_lo, address_hi);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 6;
        }

op RLA_ABSOLUTE_X(address_lo : card(8), address_hi : card(8))
        syntax = format("RLA $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x3F, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 7;
        }

op RLA_ABSOLUTE_Y(address_lo : card(8), address_hi : card(8))
        syntax = format("RLA $%2x%2x, Y", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x3B, address_lo, address_hi)
        action = {
                let address: card(16) = 0;
                ABS_Y(address, address_lo, address_hi);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 7;
        }

op RLA_PRE_INDIRECT(address_lo : card(8))
        syntax = format("RLA ($%2x, X)", address_lo)
        image = format("%8b %8b", 0x23, address_lo)
        action = {
                let address: card(16) = 0;
                PRE_IND(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 8;
        }

op RLA_POST_INDIRECT(address_lo : card(8))
        syntax = format("RLA ($%2x), Y", address_lo)
        image = format("%8b %8b", 0x33, address_lo)
        action = {
                let address: card(16) = 0;
                POST_IND(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                let carry : card(1) = value<7..7>;
                value = value << 1;
                value<0..0> = SR_C;
                SR_C = carry;
                store(address, value);
                A = A & value;

                update_N(A);
                update_Z(A);

                cycle = 8;
        }

//-------------------------------------------------------------

op SLO = SLO_ZEROPAGE | SLO_ZEROPAGE_X | SLO_ABSOLUTE | SLO_ABSOLUTE_X | SLO_ABSOLUTE_Y | SLO_PRE_INDIRECT | SLO_POST_INDIRECT


op SLO_ZEROPAGE(address_lo : card(8))
        syntax = format("SLO $%2x", address_lo)
        image = format("%8b %8b", 0x07, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 5;
        }

op SLO_ZEROPAGE_X(address_lo : card(8))
        syntax = format("SLO $%2x, X", address_lo)
        image = format("%8b %8b", 0x17, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 6;
        }

op SLO_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("SLO $%2x%2x",address_hi, address_lo)
        image = format("%8b %8b %8b", 0x0F, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS(address, address_lo, address_hi);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 6;
        }

op SLO_ABSOLUTE_X(address_lo : card(8), address_hi : card(8))
        syntax = format("SLO $%2x%2x, X",address_hi, address_lo)
        image = format("%8b %8b %8b", 0x1F, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 7;
        }

op SLO_ABSOLUTE_Y(address_lo : card(8), address_hi : card(8))
        syntax = format("SLO $%2x%2x, Y",address_hi, address_lo)
        image = format("%8b %8b %8b", 0x1B, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_Y(address, address_lo, address_hi);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 7;
        }

op SLO_PRE_INDIRECT(address_lo : card(8))
        syntax = format("SLO ($%2x, X)", address_lo)
        image = format("%8b %8b", 0x03, address_lo)
        action = {
                let address : card(16) = 0;
                PRE_IND(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 8;
        }

op SLO_POST_INDIRECT(address_lo : card(8))
        syntax = format("SLO ($%2x), Y", address_lo)
        image = format("%8b %8b", 0x13, address_lo)
        action = {
                let address : card(16) = 0;
                POST_IND(address, address_lo);
                let value : card(8) = 0;
                load(address, value);

                SR_C = value<7..7>;
                value = value << 1;
                store(address, value);

                A = A | value;

                update_N(A);
                update_Z(A);

                cycle = 8;
        }

//---------------------------------------------------------------

op USBC(value : card(8))
        syntax = format("USBC #%2x", value)
        image = format("%8b %8b", 0xEB, value)
        action = {
                let value_tmp : card(8) = ~value;

                let res: card(16) = A + value_tmp + SR_C;

                cycle = 2;

                update_N(res);
                update_Z(res<7..0>);
                update_C(res);
                update_V(value, A, res<7..0>);

                A = res<7..0>;
        }

//--------------------------------------------------------------------------

op NOP_ILLEGAL = NOP_1A | NOP_3A | NOP_5A | NOP_7A | NOP_DA | NOP_FA 

op NOP_1A()
        syntax = "NOP"
        image = format("%8b", 0x1A)
        action = {
                cycle = 2;
        }

op NOP_3A()
        syntax = "NOP"
        image = format("%8b", 0x3A)
        action = {
                cycle = 2;
        }

op NOP_5A()
        syntax = "NOP"
        image = format("%8b", 0x5A)
        action = {
                cycle = 2;
        }

op NOP_7A()
        syntax = "NOP"
        image = format("%8b", 0x7A)
        action = {
                cycle = 2;
        }

op NOP_DA()
        syntax = "NOP"
        image = format("%8b", 0xDA)
        action = {
                cycle = 2;
        }

op NOP_FA()
        syntax = "NOP"
        image = format("%8b", 0xFA)
        action = {
                cycle = 2;
        }

//-------------------------------------------------------------------

op SKB = SKB_80 | SKB_82 | SKB_89 | SKB_C2 | SKB_E2

op SKB_80(value : card(8))
        syntax = format("SKB #%2x", value)
        image = format("%8b %8b", 0x80, value)
        action = {
                IMMEDIATE();
                cycle = 2;
        }

op SKB_82(value : card(8))
        syntax = format("SKB #%2x", value)
        image = format("%8b %8b", 0x82, value)
        action = {
                IMMEDIATE();
                cycle = 2;
        }

op SKB_89(value : card(8))
        syntax = format("SKB #%2x", value)
        image = format("%8b %8b", 0x89, value)
        action = {
                IMMEDIATE();
                cycle = 2;
        }

op SKB_C2(value : card(8))
        syntax = format("SKB #%2x", value)
        image = format("%8b %8b", 0xC2, value)
        action = {
                IMMEDIATE();
                cycle = 2;
        }

op SKB_E2(value : card(8))
        syntax = format("SKB #%2x", value)
        image = format("%8b %8b", 0xE2, value)
        action = {
                IMMEDIATE();
                cycle = 2;
        }

//------------------------------------------------------

op IGN = IGN_ABSOLUTE | IGN_ABSOLUTE_X_1C | IGN_ABSOLUTE_X_3C | IGN_ABSOLUTE_X_5C | IGN_ABSOLUTE_X_7C | IGN_ABSOLUTE_X_DC | IGN_ABSOLUTE_X_FC | IGN_ZEROPAGE_04 | IGN_ZEROPAGE_44 | IGN_ZEROPAGE_64 | IGN_ZEROPAGE_X_14 | IGN_ZEROPAGE_X_34 | IGN_ZEROPAGE_X_54 | IGN_ZEROPAGE_X_74 | IGN_ZEROPAGE_X_D4 | IGN_ZEROPAGE_X_F4

op IGN_ABSOLUTE(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x0C, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS(address, address_lo, address_hi);
                cycle = 4;
        }

op IGN_ABSOLUTE_X_1C(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x1C, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);

                cycle = cycle + 4;
        }

op IGN_ABSOLUTE_X_3C(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x3C, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);

                cycle = cycle + 4;
        }

op IGN_ABSOLUTE_X_5C(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x5C, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);

                cycle = cycle + 4;
        }

op IGN_ABSOLUTE_X_7C(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0x7C, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);

                cycle = cycle + 4;
        }

op IGN_ABSOLUTE_X_DC(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xDC, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);

                cycle = cycle + 4;
        }

op IGN_ABSOLUTE_X_FC(address_lo : card(8), address_hi : card(8))
        syntax = format("IGN $%2x%2x, X", address_hi, address_lo)
        image = format("%8b %8b %8b", 0xFC, address_lo, address_hi)
        action = {
                let address : card(16) = 0;
                ABS_X(address, address_lo, address_hi);

                cycle = cycle + 4;
        }

op IGN_ZEROPAGE_04(address_lo : card(8))
        syntax = format("IGN $%2x", address_lo)
        image = format("%8b %8b", 0x04, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG(address, address_lo);

                cycle = 3;
        }

op IGN_ZEROPAGE_44(address_lo : card(8))
        syntax = format("IGN $%2x", address_lo)
        image = format("%8b %8b", 0x44, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG(address, address_lo);

                cycle = 3;
        }

op IGN_ZEROPAGE_64(address_lo : card(8))
        syntax = format("IGN $%2x", address_lo)
        image = format("%8b %8b", 0x64, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG(address, address_lo);

                cycle = 3;
        }

op IGN_ZEROPAGE_X_14(address_lo : card(8))
        syntax = format("IGN $%2x, X", address_lo)
        image = format("%8b %8b", 0x14, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);

                cycle = 4;
        }

op IGN_ZEROPAGE_X_34(address_lo : card(8))
        syntax = format("IGN $%2x, X", address_lo)
        image = format("%8b %8b", 0x34, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);

                cycle = 4;
        }

op IGN_ZEROPAGE_X_54(address_lo : card(8))
        syntax = format("IGN $%2x, X", address_lo)
        image = format("%8b %8b", 0x54, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);

                cycle = 4;
        }

op IGN_ZEROPAGE_X_74(address_lo : card(8))
        syntax = format("IGN $%2x, X", address_lo)
        image = format("%8b %8b", 0x74, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);

                cycle = 4;
        }

op IGN_ZEROPAGE_X_D4(address_lo : card(8))
        syntax = format("IGN $%2x, X", address_lo)
        image = format("%8b %8b", 0xD4, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);

                cycle = 4;
        }

op IGN_ZEROPAGE_X_F4(address_lo : card(8))
        syntax = format("IGN $%2x, X", address_lo)
        image = format("%8b %8b", 0xF4, address_lo)
        action = {
                let address : card(16) = 0;
                ZPG_X(address, address_lo);

                cycle = 4;
        }

//-------------------------------------------------------------------

op JAM = JAM_02 | JAM_12 | JAM_22 | JAM_32 | JAM_42 | JAM_52 | JAM_62 | JAM_72 | JAM_92 | JAM_B2 | JAM_D2 | JAM_F2

op JAM_02()
        syntax = "JAM"
        image = format("%8b", 0x02)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_12()
        syntax = "JAM"
        image = format("%8b", 0x12)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_22()
        syntax = "JAM"
        image = format("%8b", 0x22)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_32()
        syntax = "JAM"
        image = format("%8b", 0x32)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_42()
        syntax = "JAM"
        image = format("%8b", 0x42)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_52()
        syntax = "JAM"
        image = format("%8b", 0x52)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_62()
        syntax = "JAM"
        image = format("%8b", 0x62)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_72()
        syntax = "JAM"
        image = format("%8b", 0x72)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_92()
        syntax = "JAM"
        image = format("%8b", 0x92)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_B2()
        syntax = "JAM"
        image = format("%8b", 0xB2)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_D2()
        syntax = "JAM"
        image = format("%8b", 0xD2)
        action = {
                cycle = 1;
                is_jam = 1;
        }

op JAM_F2()
        syntax = "JAM"
        image = format("%8b", 0xF2)
        action = {
                cycle = 1;
                is_jam = 1;
        }